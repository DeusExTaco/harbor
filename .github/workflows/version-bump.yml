# .github/workflows/version-bump.yml
name: Auto Version Bump

on:
  push:
    branches: [develop]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
      - 'examples/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    name: Bump Alpha Version
    runs-on: ubuntu-latest
    # Only run on develop branch pushes (including merges from feature branches)
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get current version
        id: current-version
        uses: ./.github/actions/get-version

      - name: Calculate new version
        id: new-version
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"

          # Parse the version components
          if [[ $CURRENT =~ ^([0-9]+\.[0-9]+\.[0-9]+)-alpha\.([0-9]+)$ ]]; then
            BASE_VERSION="${BASH_REMATCH[1]}"
            ALPHA_NUM="${BASH_REMATCH[2]}"

            # Increment alpha number
            NEW_ALPHA_NUM=$((ALPHA_NUM + 1))
            NEW_VERSION="${BASE_VERSION}-alpha.${NEW_ALPHA_NUM}"

            echo "New version: $NEW_VERSION"
            echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "base=$BASE_VERSION" >> $GITHUB_OUTPUT
            echo "alpha=$NEW_ALPHA_NUM" >> $GITHUB_OUTPUT
          else
            echo "Error: Version format not recognized: $CURRENT"
            echo "Expected format: X.Y.Z-alpha.N"
            exit 1
          fi

      - name: Update version in app/__init__.py
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new }}"

          python -c "
          import sys
          new_version = '$NEW_VERSION'

          # Update app/__init__.py
          with open('app/__init__.py', 'r') as f:
              lines = f.readlines()

          with open('app/__init__.py', 'w') as f:
              for line in lines:
                  if line.startswith('__version__'):
                      f.write(f'__version__ = \"{new_version}\"\n')
                  else:
                      f.write(line)

          print(f'Updated app/__init__.py to version {new_version}')
          "

      - name: Update version in pyproject.toml
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new }}"

          python -c "
          import sys
          new_version = '$NEW_VERSION'

          # Update pyproject.toml
          with open('pyproject.toml', 'r') as f:
              lines = f.readlines()

          with open('pyproject.toml', 'w') as f:
              for line in lines:
                  if line.startswith('version ='):
                      f.write(f'version = \"{new_version}\"\n')
                  else:
                      f.write(line)

          print(f'Updated pyproject.toml to version {new_version}')
          "

      - name: Get recent commits for changelog
        id: get-commits
        run: |
          # Get the last tag for comparison
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Get commits since last tag or last version bump commit
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since tag: $LAST_TAG"
            COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD --no-merges | grep -v "^\[skip ci\]" | head -20)
          else
            # Get last 10 commits excluding version bumps
            echo "No tags found, getting recent commits"
            COMMITS=$(git log --pretty=format:"%s" -15 --no-merges | grep -v "^\[skip ci\]" | grep -v "^Bump version" | head -10)
          fi

          # Save commits for changelog update
          echo "$COMMITS" > recent_commits.txt

          # Count commits by type for summary
          FEATURE_COUNT=$(echo "$COMMITS" | grep -ciE "(add|feat|feature)" || echo 0)
          FIX_COUNT=$(echo "$COMMITS" | grep -ciE "(fix|bug)" || echo 0)
          UPDATE_COUNT=$(echo "$COMMITS" | grep -ciE "(update|change|refactor)" || echo 0)

          echo "feature_count=$FEATURE_COUNT" >> $GITHUB_OUTPUT
          echo "fix_count=$FIX_COUNT" >> $GITHUB_OUTPUT
          echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new }}"
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Create update_changelog.py file
          echo "import re" > update_changelog.py
          echo "import sys" >> update_changelog.py
          echo "from datetime import datetime" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "new_version = sys.argv[1]" >> update_changelog.py
          echo "current_date = sys.argv[2]" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Read recent commits" >> update_changelog.py
          echo "with open('recent_commits.txt', 'r') as f:" >> update_changelog.py
          echo "    commits = [line.strip() for line in f.readlines() if line.strip()]" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Categorize commits" >> update_changelog.py
          echo "added = []" >> update_changelog.py
          echo "changed = []" >> update_changelog.py
          echo "fixed = []" >> update_changelog.py
          echo "security = []" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "for commit in commits:" >> update_changelog.py
          echo "    commit_lower = commit.lower()" >> update_changelog.py
          echo "    # Clean up commit message - remove conventional commit prefixes" >> update_changelog.py
          echo "    clean_commit = re.sub(r'^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\([\w\-]+\))?:\s*', '', commit, flags=re.IGNORECASE)" >> update_changelog.py
          echo "    clean_commit = clean_commit[0].upper() + clean_commit[1:] if clean_commit else commit" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "    if any(word in commit_lower for word in ['add', 'feat', 'feature', 'implement', 'create']):" >> update_changelog.py
          echo "        added.append(f'- {clean_commit}')" >> update_changelog.py
          echo "    elif any(word in commit_lower for word in ['fix', 'bug', 'resolve', 'correct']):" >> update_changelog.py
          echo "        fixed.append(f'- {clean_commit}')" >> update_changelog.py
          echo "    elif any(word in commit_lower for word in ['security', 'cve', 'vulnerability']):" >> update_changelog.py
          echo "        security.append(f'- {clean_commit}')" >> update_changelog.py
          echo "    elif any(word in commit_lower for word in ['update', 'change', 'refactor', 'improve', 'enhance']):" >> update_changelog.py
          echo "        changed.append(f'- {clean_commit}')" >> update_changelog.py
          echo "    else:" >> update_changelog.py
          echo "        changed.append(f'- {clean_commit}')" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Read current changelog" >> update_changelog.py
          echo "try:" >> update_changelog.py
          echo "    with open('CHANGELOG.md', 'r') as f:" >> update_changelog.py
          echo "        content = f.read()" >> update_changelog.py
          echo "except FileNotFoundError:" >> update_changelog.py
          echo "    # Create new changelog if it doesn't exist" >> update_changelog.py
          echo "    content = '''# Changelog" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "All notable changes to Harbor Container Updater will be documented in this file." >> update_changelog.py
          echo "" >> update_changelog.py
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> update_changelog.py
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> update_changelog.py
          echo "" >> update_changelog.py
          echo "## [Unreleased]" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "### Added" >> update_changelog.py
          echo "-" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "### Changed" >> update_changelog.py
          echo "-" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "### Fixed" >> update_changelog.py
          echo "-" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "### Security" >> update_changelog.py
          echo "-" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "'''" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Check if version already exists" >> update_changelog.py
          echo "if f'## [{new_version}]' in content:" >> update_changelog.py
          echo "    print(f'Version {new_version} already exists in CHANGELOG')" >> update_changelog.py
          echo "    sys.exit(0)" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Create new version section" >> update_changelog.py
          echo "new_section = f'\\n## [{new_version}] - {current_date}\\n'" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "if added:" >> update_changelog.py
          echo "    new_section += '\\n### Added\\n'" >> update_changelog.py
          echo "    new_section += '\\n'.join(added) + '\\n'" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "if changed:" >> update_changelog.py
          echo "    new_section += '\\n### Changed\\n'" >> update_changelog.py
          echo "    new_section += '\\n'.join(changed) + '\\n'" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "if fixed:" >> update_changelog.py
          echo "    new_section += '\\n### Fixed\\n'" >> update_changelog.py
          echo "    new_section += '\\n'.join(fixed) + '\\n'" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "if security:" >> update_changelog.py
          echo "    new_section += '\\n### Security\\n'" >> update_changelog.py
          echo "    new_section += '\\n'.join(security) + '\\n'" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# If no commits categorized, add a generic entry" >> update_changelog.py
          echo "if not (added or changed or fixed or security):" >> update_changelog.py
          echo "    new_section += '\\n### Changed\\n'" >> update_changelog.py
          echo "    new_section += '- Version bump and minor improvements\\n'" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Find where to insert the new section" >> update_changelog.py
          echo "if '## [Unreleased]' in content:" >> update_changelog.py
          echo "    # Find the end of the Unreleased section" >> update_changelog.py
          echo "    unreleased_match = re.search(r'## \[Unreleased\].*?(?=\\n## \[|\\n\[Unreleased\]:|$)', content, re.DOTALL)" >> update_changelog.py
          echo "    if unreleased_match:" >> update_changelog.py
          echo "        insert_pos = unreleased_match.end()" >> update_changelog.py
          echo "        content = content[:insert_pos] + new_section + content[insert_pos:]" >> update_changelog.py
          echo "else:" >> update_changelog.py
          echo "    # Insert after the header" >> update_changelog.py
          echo "    lines = content.split('\\n')" >> update_changelog.py
          echo "    for i, line in enumerate(lines):" >> update_changelog.py
          echo "        if line.startswith('## ['):" >> update_changelog.py
          echo "            lines.insert(i, new_section.strip())" >> update_changelog.py
          echo "            break" >> update_changelog.py
          echo "    else:" >> update_changelog.py
          echo "        # No version sections found, append at end" >> update_changelog.py
          echo "        lines.append(new_section.strip())" >> update_changelog.py
          echo "    content = '\\n'.join(lines)" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "# Write updated changelog" >> update_changelog.py
          echo "with open('CHANGELOG.md', 'w') as f:" >> update_changelog.py
          echo "    f.write(content)" >> update_changelog.py
          echo "" >> update_changelog.py
          echo "print(f'Updated CHANGELOG.md with version {new_version}')" >> update_changelog.py

          python update_changelog.py "$NEW_VERSION" "$CURRENT_DATE"

      - name: Verify all files are updated
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new }}"

          python -c "
          import sys

          expected_version = '$NEW_VERSION'
          errors = []

          # Check app/__init__.py
          with open('app/__init__.py', 'r') as f:
              app_version = None
              for line in f:
                  if line.startswith('__version__'):
                      parts = line.split('=', 1)
                      if len(parts) == 2:
                          app_version = parts[1].strip().strip('\"').strip(\"'\")
                      break

              if not app_version:
                  errors.append('Could not find __version__ in app/__init__.py')
              elif app_version != expected_version:
                  errors.append(f'app/__init__.py has wrong version: {app_version} (expected {expected_version})')

          # Check pyproject.toml
          with open('pyproject.toml', 'r') as f:
              proj_version = None
              for line in f:
                  if line.startswith('version ='):
                      parts = line.split('=', 1)
                      if len(parts) == 2:
                          proj_version = parts[1].strip().strip('\"').strip(\"'\")
                      break

              if not proj_version:
                  errors.append('Could not find version in pyproject.toml')
              elif proj_version != expected_version:
                  errors.append(f'pyproject.toml has wrong version: {proj_version} (expected {expected_version})')

          # Check CHANGELOG.md
          with open('CHANGELOG.md', 'r') as f:
              content = f.read()
              if f'## [{expected_version}]' not in content:
                  errors.append(f'CHANGELOG.md does not contain version {expected_version}')

          # Report results
          if errors:
              print('Version verification failed:')
              for error in errors:
                  print(f'  - {error}')
              sys.exit(1)
          else:
              print(f'All files correctly updated to version {expected_version}')
              print(f'  - app/__init__.py: {app_version}')
              print(f'  - pyproject.toml: {proj_version}')
              print(f'  - CHANGELOG.md: contains [{expected_version}]')
          "

      - name: Commit version bump and changelog
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add all changed files
          git add app/__init__.py pyproject.toml CHANGELOG.md

          # Create detailed commit message
          FEATURE_COUNT="${{ steps.get-commits.outputs.feature_count }}"
          FIX_COUNT="${{ steps.get-commits.outputs.fix_count }}"
          UPDATE_COUNT="${{ steps.get-commits.outputs.update_count }}"

          # Commit with skip-ci to avoid triggering another workflow run
          git commit -m "[skip ci] Bump version to ${{ steps.new-version.outputs.new }}

          Automated version bump from ${{ steps.current-version.outputs.current }} to ${{ steps.new-version.outputs.new }}

          Summary of changes:
          - Features/Additions: ${FEATURE_COUNT}
          - Bug Fixes: ${FIX_COUNT}
          - Updates/Changes: ${UPDATE_COUNT}

          Files updated:
          - app/__init__.py
          - pyproject.toml
          - CHANGELOG.md

          Triggered by: ${{ github.event.head_commit.message }}"

          # Push the changes
          git push

      - name: Create and push version tag
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new }}"

          # Configure git for tagging
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Create annotated tag with detailed message
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION

          Automated version release from develop branch

          Summary of changes:
          - Features/Additions: ${{ steps.get-commits.outputs.feature_count }}
          - Bug Fixes: ${{ steps.get-commits.outputs.fix_count }}
          - Updates/Changes: ${{ steps.get-commits.outputs.update_count }}

          Previous version: ${{ steps.current-version.outputs.current }}
          Base version: ${{ steps.new-version.outputs.base }}
          Alpha iteration: ${{ steps.new-version.outputs.alpha }}

          This is an alpha pre-release version.

          Docker images available:
          - ghcr.io/deusextaco/harbor:$NEW_VERSION
          - dextaco/harbor:$NEW_VERSION"

          # Push the tag to trigger release workflow
          git push origin "v$NEW_VERSION"

          echo "Tag v$NEW_VERSION created and pushed successfully"
          echo "This will trigger the CI/CD pipeline to create a GitHub release"

      - name: Create version bump summary
        run: |
          echo "# Version Bump & Changelog Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Version Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ steps.current-version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ steps.new-version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Version**: ${{ steps.new-version.outputs.base }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Alpha Number**: ${{ steps.new-version.outputs.alpha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Tag**: v${{ steps.new-version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Change Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Features/Additions**: ${{ steps.get-commits.outputs.feature_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bug Fixes**: ${{ steps.get-commits.outputs.fix_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Updates/Changes**: ${{ steps.get-commits.outputs.update_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Files Updated" >> $GITHUB_STEP_SUMMARY
          echo "- \`app/__init__.py\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`pyproject.toml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`CHANGELOG.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created**: v${{ steps.new-version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: Alpha Pre-release" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Workflow**: Will trigger automatically" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Milestone" >> $GITHUB_STEP_SUMMARY
          echo "- **Current**: M0 (Foundation)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Triggered By" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Message**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.event.head_commit.author.name }}" >> $GITHUB_STEP_SUMMARY
