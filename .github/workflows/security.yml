name: Security Scanning

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

# Explicit minimal permissions
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # Secret Scanning and Detection
  # =============================================================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive secret scanning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline

      - name: Verify secrets baseline
        run: |
          detect-secrets audit .secrets.baseline --report

  # =============================================================================
  # Container Security Scanning
  # =============================================================================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Harbor image for scanning
        run: |
          # Use development Dockerfile since app/ directory may not exist yet
          docker build -t harbor:security-scan -f deploy/docker/Dockerfile.dev . || {
            echo "Production build failed, trying development build..."
            # Create minimal Dockerfile for security scanning if main build fails
            cat > Dockerfile.security << 'EOF'
            FROM python:3.13-slim
            WORKDIR /app
            COPY requirements/ ./requirements/
            COPY pyproject.toml ./
            RUN pip install --upgrade pip && pip install -e .
            COPY . .
            CMD ["echo", "Security scan image"]
            EOF
                        docker build -t harbor:security-scan -f Dockerfile.security .
                      }

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'harbor:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Ensure Trivy SARIF file exists
        run: |
          if [ ! -f trivy-results.sarif ] || [ ! -s trivy-results.sarif ]; then
            echo "Creating empty Trivy SARIF file..."
            cat > trivy-results.sarif << 'EOF'
            {
              "version": "2.1.0",
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "Trivy",
                      "version": "1.0.0"
                    }
                  },
                  "results": []
                }
              ]
            }
            EOF
          fi

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-security'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Ensure Trivy filesystem SARIF file exists
        run: |
          if [ ! -f trivy-fs-results.sarif ] || [ ! -s trivy-fs-results.sarif ]; then
            echo "Creating empty Trivy filesystem SARIF file..."
            cat > trivy-fs-results.sarif << 'EOF'
            {
              "version": "2.1.0",
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "Trivy-FS",
                      "version": "1.0.0"
                    }
                  },
                  "results": []
                }
              ]
            }
            EOF
          fi

      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'filesystem-security'

  # =============================================================================
  # Python Security Analysis
  # =============================================================================
  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create empty SARIF template
        run: |
          cat > empty-sarif-template.json << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "placeholder",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF

      - name: Run Bandit security analysis
        run: |
          # Check if app directory exists and has Python files
          if [ -d "app" ] && find app -name "*.py" | grep -q .; then
            bandit -r app/ -f sarif -o bandit-results.sarif || {
              echo "Bandit scan completed with findings or errors"
              # Create valid empty SARIF if bandit failed to create output
              if [ ! -f bandit-results.sarif ] || [ ! -s bandit-results.sarif ]; then
                sed 's/"placeholder"/"bandit"/' empty-sarif-template.json > bandit-results.sarif
              fi
            }
          else
            echo "No Python files found in app/ directory - creating empty SARIF"
            sed 's/"placeholder"/"bandit"/' empty-sarif-template.json > bandit-results.sarif
          fi
        continue-on-error: true

      - name: Upload Bandit results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'bandit-results.sarif'
          category: 'python-security'

      - name: Run pip-audit for dependency vulnerabilities
        run: |
          pip install pip-audit
          pip-audit --format=sarif --output=pip-audit-results.sarif || {
            echo "pip-audit scan completed with findings or errors"
            # Create valid empty SARIF if pip-audit failed
            if [ ! -f pip-audit-results.sarif ] || [ ! -s pip-audit-results.sarif ]; then
              sed 's/"placeholder"/"pip-audit"/' empty-sarif-template.json > pip-audit-results.sarif
            fi
          }
        continue-on-error: true

      - name: Upload pip-audit results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'pip-audit-results.sarif'
          category: 'dependency-security'

  # =============================================================================
  # Infrastructure Security
  # =============================================================================
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Checkov for Infrastructure as Code security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
          skip_check: CKV2_GHA_1  # Skip write-all permissions check (we use explicit permissions)

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'infrastructure-security'

  # =============================================================================
  # Security Report Generation
  # =============================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, container-security, python-security, infrastructure-security]
    if: always()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "# Harbor Security Scan Summary" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- Python Security: ${{ needs.python-security.result }}" >> security-summary.md
          echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "View detailed results in the Security tab of this repository." >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30
