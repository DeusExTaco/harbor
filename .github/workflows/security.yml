name: Security Scanning

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

# Minimal required permissions
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # Secret Scanning and Detection
  # =============================================================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Initialize secrets baseline if not exists
        run: |
          if [ ! -f .secrets.baseline ]; then
            echo "Creating initial secrets baseline..."
            detect-secrets scan --all-files > .secrets.baseline
          fi

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline

  # =============================================================================
  # Python Security Analysis
  # =============================================================================
  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install base security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: Install project dependencies (if available)
        run: |
          # Install from your requirements structure
          if [ -f "requirements/base.txt" ]; then
            echo "📦 Installing base requirements..."
            pip install -r requirements/base.txt || echo "⚠️  Some base dependencies failed to install"
          fi

          if [ -f "requirements/development.txt" ]; then
            echo "📦 Installing development requirements..."
            pip install -r requirements/development.txt || echo "⚠️  Some dev dependencies failed to install"
          fi

          # Install from pyproject.toml if available
          if [ -f "pyproject.toml" ]; then
            echo "📦 Installing from pyproject.toml..."
            pip install -e . || echo "⚠️  Project installation failed - this is expected during M0"
          fi

      - name: Run Bandit security analysis
        run: |
          # Only scan if app directory exists with Python files
          if [ -d "app" ] && find app -name "*.py" -type f | head -1 > /dev/null; then
            echo "🔍 Running Bandit on app/ directory..."
            bandit -r app/ -f json -o bandit-report.json || echo "⚠️  Bandit found issues"
          else
            echo "ℹ️  No Python files found in app/ directory"
            echo '{"results": [], "metrics": {"_totals": {"loc": 0, "nosec": 0, "skipped_tests": 0}}}' > bandit-report.json
          fi

      - name: Run pip-audit for dependency vulnerabilities
        run: |
          echo "🔍 Running pip-audit on installed packages..."
          pip-audit --format=json --output=pip-audit-report.json || echo "⚠️  pip-audit completed with findings"

      - name: Run safety check
        run: |
          echo "🔍 Running safety check..."
          if command -v safety > /dev/null; then
            safety check --json --output=safety-report.json || echo "⚠️  Safety check completed with findings"
          else
            echo '{"vulnerabilities": []}' > safety-report.json
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            pip-audit-report.json
            safety-report.json
          retention-days: 30

  # =============================================================================
  # Container Security (Only if image exists)
  # =============================================================================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    # Only run if this is NOT a PR (so image should exist from docker-build workflow)
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Try to pull the image first, fall back to building if it doesn't exist
      - name: Try to get Harbor image for scanning
        run: |
          echo "🔍 Attempting to get Harbor image for security scanning..."

          # Extract branch/tag name for image reference
          if [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="${{ github.ref_name }}"
            fi
          else
            IMAGE_TAG="develop"
          fi

          IMAGE_REF="ghcr.io/deusextaco/harbor:${IMAGE_TAG}"
          echo "IMAGE_REF=${IMAGE_REF}" >> $GITHUB_ENV

          # Login to GHCR to access the image
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Try to pull the image first
          if docker pull "${IMAGE_REF}" 2>/dev/null; then
            echo "✅ Pulled existing image: ${IMAGE_REF}"
            echo "CONTAINER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "ℹ️  Image not available for pulling, attempting local build..."
            # Try development build first (more likely to succeed)
            if docker build -t harbor:security-scan -f deploy/docker/Dockerfile.dev .; then
              echo "✅ Development build succeeded"
              echo "CONTAINER_AVAILABLE=true" >> $GITHUB_ENV
              echo "IMAGE_REF=harbor:security-scan" >> $GITHUB_ENV
            else
              echo "⚠️  Build failed - skipping container security scan"
              echo "CONTAINER_AVAILABLE=false" >> $GITHUB_ENV
            fi
          fi

      - name: Run Trivy container scan
        if: env.CONTAINER_AVAILABLE == 'true'
        run: |
          echo "🔍 Running Trivy container vulnerability scan on ${IMAGE_REF}..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasecurity/trivy:latest image \
            --format json \
            --output /workspace/trivy-container-report.json \
            --severity HIGH,CRITICAL \
            "${IMAGE_REF}" || echo "⚠️  Trivy container scan completed with findings"

      - name: Run Trivy filesystem scan
        run: |
          echo "🔍 Running Trivy filesystem scan..."
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            aquasecurity/trivy:latest fs \
            --format json \
            --output /workspace/trivy-fs-report.json \
            --severity HIGH,CRITICAL \
            /workspace || echo "⚠️  Trivy filesystem scan completed with findings"

      - name: Upload container security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-container-report.json
            trivy-fs-report.json
          retention-days: 30

  # =============================================================================
  # Infrastructure Security
  # =============================================================================
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Checkov for Infrastructure as Code
        run: |
          pip install checkov
          echo "🔍 Running Checkov security scan..."
          checkov --directory . \
            --framework dockerfile,github_actions,secrets \
            --output json \
            --output-file checkov-report.json \
            --soft-fail || echo "⚠️  Checkov scan completed with findings"

      - name: Upload infrastructure security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-security-report
          path: checkov-report.json
          retention-days: 30

  # =============================================================================
  # Security Summary
  # =============================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, python-security, container-security, infrastructure-security]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "# 🛡️ Harbor Security Scan Summary" > security-summary.md
          echo "Generated on: $(date -u)" >> security-summary.md
          echo "" >> security-summary.md
          echo "## 📊 Scan Results" >> security-summary.md
          echo "- 🔍 Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- 🐍 Python Security: ${{ needs.python-security.result }}" >> security-summary.md
          echo "- 🐳 Container Security: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- 🏗️ Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "## 📝 Notes" >> security-summary.md
          echo "- Security scan reports are available as workflow artifacts" >> security-summary.md
          echo "- JSON format reports can be downloaded for detailed analysis" >> security-summary.md
          echo "- This is a development-phase security scan (M0 milestone)" >> security-summary.md
          echo "- Some findings are expected during foundation development" >> security-summary.md
          echo "" >> security-summary.md
          echo "## 🎯 Current Status" >> security-summary.md
          echo "- **Milestone**: M0 (Foundation)" >> security-summary.md
          echo "- **Phase**: Early Development" >> security-summary.md
          echo "- **Focus**: Building core infrastructure and CI/CD pipeline" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30
