name: Debug Workflow

on:
  workflow_dispatch:  # Manual trigger only
  push:
    branches: [debug]  # Only run on debug branch

jobs:
  debug-environment:
    name: Debug Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check repository structure
        run: |
          echo "üîç Repository Structure:"
          echo "üìÅ Root files:"
          ls -la
          echo ""
          echo "üìÅ Requirements directory:"
          if [ -d "requirements" ]; then
            ls -la requirements/
            echo ""
            echo "üìÑ Base requirements content:"
            head -20 requirements/base.txt || echo "No base.txt found"
          else
            echo "‚ùå No requirements directory found"
          fi
          echo ""
          echo "üìÅ App directory:"
          if [ -d "app" ]; then
            ls -la app/
          else
            echo "‚ùå No app directory found"
          fi
          echo ""
          echo "üìÅ Deploy directory:"
          if [ -d "deploy" ]; then
            find deploy -name "*.dockerfile" -o -name "Dockerfile*"
          else
            echo "‚ùå No deploy directory found"
          fi

      - name: Check GitHub secrets
        run: |
          echo "üîê Checking GitHub environment:"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Event: ${{ github.event_name }}"
          echo ""
          echo "üîë Secret availability:"
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "‚úÖ GITHUB_TOKEN is available"
          else
            echo "‚ùå GITHUB_TOKEN is not available"
          fi

      - name: Test Docker build
        run: |
          echo "üê≥ Testing Docker build capability:"

          # Check if Dockerfile.dev exists
          if [ -f "deploy/docker/Dockerfile.dev" ]; then
            echo "‚úÖ Found Dockerfile.dev"
            echo "üìÑ Dockerfile.dev content (first 20 lines):"
            head -20 deploy/docker/Dockerfile.dev
            echo ""
            echo "üî® Attempting to build..."
            if docker build -t harbor:debug -f deploy/docker/Dockerfile.dev .; then
              echo "‚úÖ Docker build succeeded"
              docker images harbor:debug
            else
              echo "‚ùå Docker build failed"
            fi
          else
            echo "‚ùå No Dockerfile.dev found"
          fi

      - name: Test Python environment
        run: |
          echo "üêç Testing Python environment:"
          python --version
          pip --version
          echo ""
          echo "üì¶ Installing requirements..."
          if [ -f "requirements/base.txt" ]; then
            pip install -r requirements/base.txt || echo "‚ö†Ô∏è  Some requirements failed"
          fi
          echo ""
          echo "üß™ Testing imports:"
          python -c "
          try:
              import fastapi
              print('‚úÖ FastAPI available')
          except ImportError:
              print('‚ùå FastAPI not available')

          try:
              import sqlalchemy
              print('‚úÖ SQLAlchemy available')
          except ImportError:
              print('‚ùå SQLAlchemy not available')

          try:
              import app
              print('‚úÖ Harbor app module available')
          except ImportError as e:
              print(f'‚ÑπÔ∏è  Harbor app not available: {e}')
          "

      - name: Test GitHub Container Registry access
        run: |
          echo "üì¶ Testing GHCR access:"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          if [ $? -eq 0 ]; then
            echo "‚úÖ GHCR login successful"

            # Try to pull any existing image
            IMAGE_REF="ghcr.io/deusextaco/harbor:develop"
            echo "üîç Checking for existing image: ${IMAGE_REF}"
            if docker pull "${IMAGE_REF}" 2>/dev/null; then
              echo "‚úÖ Found existing image: ${IMAGE_REF}"
              docker images "${IMAGE_REF}"
            else
              echo "‚ÑπÔ∏è  No existing image found (expected for new repository)"
            fi
          else
            echo "‚ùå GHCR login failed"
          fi
