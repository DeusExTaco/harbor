name: 'Dependency Review'

on:
  workflow_call:
    outputs:
      dependency-check-passed:
        description: "Whether dependency checks passed"
        value: ${{ jobs.dependency-summary.outputs.dependency-passed }}
  pull_request:
    branches: [ "main", "develop" ]
  push:
    branches: [ "main", "develop" ]
  schedule:
    # Run dependency review weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  pull-requests: write
  security-events: write  # pragma: allowlist secret

jobs:
  # =============================================================================
  # Dependency Review (PR only)
  # =============================================================================
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    outputs:
      review-passed: ${{ steps.review-result.outputs.passed }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0
          deny-licenses: AGPL-1.0, AGPL-3.0, GPL-2.0
          comment-summary-in-pr: always

      - name: Set review result
        id: review-result
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ Dependency review completed"

  # =============================================================================
  # Dependency Security Scan (All events)
  # =============================================================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    outputs:
      scan-passed: ${{ steps.scan-result.outputs.passed }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          # Install base dependencies if available
          if [ -f "requirements/base.txt" ]; then
            echo "📦 Installing base requirements..."
            pip install -r requirements/base.txt || echo "⚠️  Some base dependencies failed"
          fi

          # Install development dependencies if available
          if [ -f "requirements/development.txt" ]; then
            echo "📦 Installing development requirements..."
            pip install -r requirements/development.txt || echo "⚠️  Some dev dependencies failed"
          fi

          # Install from pyproject.toml if available
          if [ -f "pyproject.toml" ]; then
            echo "📦 Installing from pyproject.toml..."
            pip install -e ".[dev]" || echo "⚠️  Project installation failed - expected during M0"
          fi

      - name: Install security tools
        run: |
          pip install pip-audit safety

      - name: Generate dependency report
        run: |
          echo "🔍 Running dependency security scans..."

          # pip-audit scan
          echo "Running pip-audit..."
          pip-audit --format=json --output=dependency-audit.json || echo "⚠️  pip-audit found vulnerabilities"

          # Generate package list
          echo "Generating package list..."
          pip list --format=json > installed-packages.json

          # Safety check
          echo "Running safety check..."
          safety check --json --output=safety-report.json || echo "⚠️  Safety found vulnerabilities"
        continue-on-error: true

      - name: Analyze dependency results
        run: |
          echo "📊 Analyzing dependency scan results..."

          # Check for critical vulnerabilities
          CRITICAL_VULNS=0

          if [ -f "dependency-audit.json" ]; then
            # Count vulnerabilities from pip-audit
            AUDIT_VULNS=$(python3 -c "
            import json
            try:
                with open('dependency-audit.json', 'r') as f:
                    data = json.load(f)
                    vulns = len(data.get('vulnerabilities', []))
                    print(vulns)
            except:
                print(0)
            " 2>/dev/null || echo "0")

            echo "pip-audit found $AUDIT_VULNS vulnerabilities"
            CRITICAL_VULNS=$((CRITICAL_VULNS + AUDIT_VULNS))
          fi

          if [ -f "safety-report.json" ]; then
            # Count vulnerabilities from safety
            SAFETY_VULNS=$(python3 -c "
            import json
            try:
                with open('safety-report.json', 'r') as f:
                    data = json.load(f)
                    vulns = len(data.get('vulnerabilities', []))
                    print(vulns)
            except:
                print(0)
            " 2>/dev/null || echo "0")

            echo "Safety found $SAFETY_VULNS vulnerabilities"
            CRITICAL_VULNS=$((CRITICAL_VULNS + SAFETY_VULNS))
          fi

          echo "Total vulnerabilities found: $CRITICAL_VULNS"

          # For M0, we'll be lenient but informative
          if [ $CRITICAL_VULNS -gt 10 ]; then
            echo "⚠️  High number of vulnerabilities found ($CRITICAL_VULNS)"
            echo "This may need attention before production deployment"
          else
            echo "✅ Acceptable vulnerability count for development phase"
          fi

      - name: Set scan result
        id: scan-result
        run: |
          # For M0 milestone, we pass dependency scans even with findings
          # Real production deployments would be more strict
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ Dependency security scan completed"

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            dependency-audit.json
            installed-packages.json
            safety-report.json
          retention-days: 30

  # =============================================================================
  # License Compliance Check
  # =============================================================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    outputs:
      license-passed: ${{ steps.license-result.outputs.passed }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install license checker
        run: |
          pip install pip-licenses

      - name: Check licenses
        run: |
          echo "📋 Checking package licenses..."

          # Install dependencies first
          if [ -f "requirements/base.txt" ]; then
            pip install -r requirements/base.txt || echo "Some packages failed to install"
          fi

          # Generate license report
          pip-licenses --format=json --output-file=license-report.json || echo "License check completed with warnings"

          # Display license summary
          echo "📊 License Summary:"
          pip-licenses --summary || echo "License summary completed"

      - name: Validate license compliance
        run: |
          echo "🔍 Validating license compliance..."

          # Define allowed licenses
          ALLOWED_LICENSES="MIT|Apache|BSD|ISC|Python"

          # Check for problematic licenses
          PROBLEMATIC=$(pip-licenses --format=plain | grep -v -E "$ALLOWED_LICENSES" | grep -v "License" | head -10 || echo "")

          if [ -n "$PROBLEMATIC" ]; then
            echo "⚠️  Found packages with non-standard licenses:"
            echo "$PROBLEMATIC"
            echo ""
            echo "Please review these licenses for compliance"
          else
            echo "✅ All licenses appear to be compatible"
          fi

      - name: Set license result
        id: license-result
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ License compliance check completed"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  # =============================================================================
  # Dependency Summary
  # =============================================================================
  dependency-summary:
    name: Dependency Summary
    runs-on: ubuntu-latest
    needs: [dependency-review, dependency-scan, license-check]
    if: always()

    outputs:
      dependency-passed: ${{ steps.summary.outputs.dependency-passed }}

    steps:
      - name: Generate dependency summary
        id: summary
        run: |
          echo "# 📦 Harbor Dependency Review Summary" > dependency-summary.md
          echo "Generated on: $(date -u)" >> dependency-summary.md
          echo "" >> dependency-summary.md
          echo "## 📊 Review Results" >> dependency-summary.md
          echo "- 🔍 Dependency Review: ${{ needs.dependency-review.result }}" >> dependency-summary.md
          echo "- 🛡️ Security Scan: ${{ needs.dependency-scan.result }}" >> dependency-summary.md
          echo "- 📋 License Check: ${{ needs.license-check.result }}" >> dependency-summary.md
          echo "" >> dependency-summary.md

          # Check individual results
          REVIEW_PASSED="${{ needs.dependency-review.outputs.review-passed }}"
          SCAN_PASSED="${{ needs.dependency-scan.outputs.scan-passed }}"
          LICENSE_PASSED="${{ needs.license-check.outputs.license-passed }}"

          echo "## 📋 Detailed Results" >> dependency-summary.md
          echo "- Review: ${REVIEW_PASSED:-skipped}" >> dependency-summary.md
          echo "- Security: ${SCAN_PASSED:-skipped}" >> dependency-summary.md
          echo "- Licenses: ${LICENSE_PASSED:-skipped}" >> dependency-summary.md
          echo "" >> dependency-summary.md

          # Determine overall result
          if [[ ("${{ needs.dependency-review.result }}" == "success" || "${{ needs.dependency-review.result }}" == "skipped") && \
                "${{ needs.dependency-scan.result }}" == "success" && \
                "${{ needs.license-check.result }}" == "success" ]]; then
            echo "dependency-passed=true" >> $GITHUB_OUTPUT
            echo "## ✅ Overall Result: PASSED" >> dependency-summary.md
            echo "" >> dependency-summary.md
            echo "All dependency checks completed successfully!" >> dependency-summary.md
          else
            echo "dependency-passed=false" >> $GITHUB_OUTPUT
            echo "## ⚠️ Overall Result: NEEDS ATTENTION" >> dependency-summary.md
            echo "" >> dependency-summary.md
            echo "Some dependency checks found issues that may need review." >> dependency-summary.md
          fi

          echo "" >> dependency-summary.md
          echo "## 📝 Notes" >> dependency-summary.md
          echo "- Dependency reports are available as workflow artifacts" >> dependency-summary.md
          echo "- JSON format reports can be downloaded for detailed analysis" >> dependency-summary.md
          echo "- License compliance is checked against common open-source licenses" >> dependency-summary.md
          echo "- This is a development-phase dependency scan (M0 milestone)" >> dependency-summary.md
          echo "" >> dependency-summary.md
          echo "## 🎯 Current Status" >> dependency-summary.md
          echo "- **Milestone**: M0 (Foundation)" >> dependency-summary.md
          echo "- **Focus**: Establishing core dependencies and security baseline" >> dependency-summary.md

          cat dependency-summary.md

      - name: Upload dependency summary
        uses: actions/upload-artifact@v4
        with:
          name: dependency-summary
          path: dependency-summary.md
          retention-days: 30
