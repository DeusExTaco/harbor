name: Docker Build & Publish

on:
  workflow_call:
    inputs:
      force-build:
        description: 'Force build even without test results'
        required: false
        default: false
        type: boolean
    outputs:
      image-tags:
        description: "Published image tags"
        value: ${{ jobs.summary.outputs.image-tags }}
      build-successful:
        description: "Whether build was successful"
        value: ${{ jobs.summary.outputs.build-successful }}
  push:
    branches: [main, develop]
    tags: ['v*']

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY_IMAGE_DOCKERHUB: dextaco/harbor
  REGISTRY_IMAGE_GHCR: ghcr.io/deusextaco/harbor

jobs:
  # =============================================================================
  # Build Configuration
  # =============================================================================
  build-config:
    name: Build Configuration
    runs-on: ubuntu-latest

    outputs:
      docker-tags: ${{ steps.config.outputs.docker-tags }}
      ghcr-tags: ${{ steps.config.outputs.ghcr-tags }}
      dockerfile: ${{ steps.config.outputs.dockerfile }}
      should-build: ${{ steps.config.outputs.should-build }}

    steps:
      - name: Determine build configuration
        id: config
        run: |
          # Determine if we should build
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "üîÑ Pull request - skipping build"
            exit 0
          else
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

          # Determine tags based on branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "docker-tags=dextaco/harbor:latest" >> $GITHUB_OUTPUT
            echo "ghcr-tags=ghcr.io/deusextaco/harbor:latest" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile" >> $GITHUB_OUTPUT
            echo "üì¶ Main branch - using production Dockerfile with 'latest' tag"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "docker-tags=dextaco/harbor:develop" >> $GITHUB_OUTPUT
            echo "ghcr-tags=ghcr.io/deusextaco/harbor:develop" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "üì¶ Develop branch - using dev Dockerfile with 'develop' tag"
          else
            # For other branches, use latest tag with dev dockerfile
            echo "docker-tags=dextaco/harbor:latest" >> $GITHUB_OUTPUT
            echo "ghcr-tags=ghcr.io/deusextaco/harbor:latest" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "üì¶ Feature branch - using dev Dockerfile with 'latest' tag"
          fi

  # =============================================================================
  # Docker Build & Push
  # =============================================================================
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [build-config]
    if: needs.build-config.outputs.should-build == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      # Login to registries
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push to Docker Hub
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ needs.build-config.outputs.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ needs.build-config.outputs.docker-tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE_DOCKERHUB }},push-by-digest=true,name-canonical=true,push=true
          labels: |
            org.opencontainers.image.title=Harbor Container Updater
            org.opencontainers.image.description=Automated Docker container updates
            org.opencontainers.image.source=https://github.com/DeusExTaco/harbor
            org.opencontainers.image.version=0.1.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      # Build and push to GHCR with explicit platform
      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ needs.build-config.outputs.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ needs.build-config.outputs.ghcr-tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE_GHCR }},push-by-digest=true,name-canonical=true,push=true
          labels: |
            org.opencontainers.image.title=Harbor Container Updater
            org.opencontainers.image.description=Automated Docker container updates
            org.opencontainers.image.source=https://github.com/DeusExTaco/harbor
            org.opencontainers.image.version=0.1.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      # Create proper manifest for Docker Hub
      - name: Create manifest for Docker Hub
        run: |
          docker buildx imagetools create \
            --tag ${{ needs.build-config.outputs.docker-tags }} \
            ${{ env.REGISTRY_IMAGE_DOCKERHUB }}@${{ steps.build-dockerhub.outputs.digest }}

      # Create proper manifest for GHCR
      - name: Create manifest for GHCR
        run: |
          docker buildx imagetools create \
            --tag ${{ needs.build-config.outputs.ghcr-tags }} \
            ${{ env.REGISTRY_IMAGE_GHCR }}@${{ steps.build-ghcr.outputs.digest }}

  # =============================================================================
  # Image Testing
  # =============================================================================
  test:
    name: Test Images
    runs-on: ubuntu-latest
    needs: [build-config, build]
    if: needs.build-config.outputs.should-build == 'true'

    steps:
      # Test Docker Hub image
      - name: Test Docker Hub image
        run: |
          echo "üß™ Testing Docker Hub image..."
          docker run --rm ${{ needs.build-config.outputs.docker-tags }} python -c "
          import sys
          print('‚úÖ Docker Hub image works!')
          print(f'Python version: {sys.version}')

          try:
              import app
              print(f'‚úÖ Harbor version: {app.__version__}')
              print(f'‚úÖ Milestone: {app.__milestone__}')
              print(f'‚úÖ Status: {app.__status__}')
          except ImportError as e:
              print(f'‚ùå Harbor app import failed: {e}')
              exit(1)

          try:
              import fastapi
              print('‚úÖ FastAPI available')
          except ImportError:
              print('‚ö†Ô∏è  FastAPI not available')
          "

      # Test GHCR image
      - name: Test GHCR image
        run: |
          echo "üß™ Testing GHCR image..."
          docker run --rm ${{ needs.build-config.outputs.ghcr-tags }} python -c "
          import sys
          print('‚úÖ GHCR image works!')
          print(f'Python version: {sys.version}')

          try:
              import app
              print(f'‚úÖ Harbor version: {app.__version__}')
              print(f'‚úÖ Milestone: {app.__milestone__}')
              print(f'‚úÖ Status: {app.__status__}')
          except ImportError as e:
              print(f'‚ùå Harbor app import failed: {e}')
              exit(1)
          "

      # Test FastAPI functionality
      - name: Test FastAPI endpoints
        run: |
          echo "üß™ Testing FastAPI application..."

          # Start container in background
          docker run -d --name harbor-test -p 8080:8080 ${{ needs.build-config.outputs.docker-tags }}

          # Wait for startup
          echo "‚è≥ Waiting for application startup..."
          sleep 15

          # Test health endpoint
          echo "üîç Testing /healthz endpoint..."
          if curl -f -s http://localhost:8080/healthz; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
            docker logs harbor-test
            exit 1
          fi

          # Test version endpoint
          echo "üîç Testing /version endpoint..."
          if curl -f -s http://localhost:8080/version | jq '.version'; then
            echo "‚úÖ Version endpoint working"
          else
            echo "‚ùå Version endpoint failed"
          fi

          # Test root endpoint
          echo "üîç Testing / endpoint..."
          if curl -f -s http://localhost:8080/ | jq '.name'; then
            echo "‚úÖ Root endpoint working"
          else
            echo "‚ùå Root endpoint failed"
          fi

          # Cleanup
          docker stop harbor-test
          docker rm harbor-test

  # =============================================================================
  # Build Summary
  # =============================================================================
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-config, build, test]
    if: always()

    outputs:
      image-tags: ${{ steps.output.outputs.image-tags }}
      build-successful: ${{ steps.output.outputs.build-successful }}

    steps:
      - name: Set outputs and generate summary
        id: output
        run: |
          # Determine if build was successful
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "build-successful=true" >> $GITHUB_OUTPUT
            BUILD_STATUS="‚úÖ SUCCESS"
          else
            echo "build-successful=false" >> $GITHUB_OUTPUT
            BUILD_STATUS="‚ùå FAILED"
          fi

          # Set image tags output
          if [ "${{ needs.build-config.outputs.should-build }}" = "true" ]; then
            DOCKER_TAG="${{ needs.build-config.outputs.docker-tags }}"
            GHCR_TAG="${{ needs.build-config.outputs.ghcr-tags }}"
            echo "image-tags=${DOCKER_TAG},${GHCR_TAG}" >> $GITHUB_OUTPUT
          else
            echo "image-tags=" >> $GITHUB_OUTPUT
          fi

          # Generate summary
          echo "üéâ Harbor Docker Build Summary"
          echo "============================"
          echo ""
          echo "üìã Build Status: ${BUILD_STATUS}"
          echo "üîß Branch: ${{ github.ref_name }}"
          echo "üì¶ Dockerfile: ${{ needs.build-config.outputs.dockerfile }}"
          echo "üèóÔ∏è  Platform: linux/amd64"
          echo ""

          if [ "${{ needs.build-config.outputs.should-build }}" = "true" ]; then
            echo "üì¶ Published Images:"
            echo "‚Ä¢ Docker Hub: ${{ needs.build-config.outputs.docker-tags }}"
            echo "‚Ä¢ GHCR: ${{ needs.build-config.outputs.ghcr-tags }}"
            echo ""
            echo "üîó Repository Links:"
            echo "‚Ä¢ https://hub.docker.com/r/dextaco/harbor"
            echo "‚Ä¢ https://github.com/DeusExTaco/harbor/pkgs/container/harbor"
            echo ""
            echo "üì• Quick Start:"
            echo "docker run -d -p 8080:8080 ${{ needs.build-config.outputs.docker-tags }}"
          else
            echo "‚ÑπÔ∏è  Build skipped for pull request"
          fi

          echo ""
          echo "üéØ M0 Milestone Status: Foundation Complete"
          echo "üìã Next: M1 Container Discovery & Registry Integration"
