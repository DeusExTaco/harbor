name: Docker Build & Publish

on:
  workflow_call:
    inputs:
      force-build:
        description: 'Force build even without test results'
        required: false
        default: false
        type: boolean
    outputs:
      image-tags:
        description: "Published image tags"
        value: ${{ jobs.summary.outputs.image-tags }}
      build-successful:
        description: "Whether build was successful"
        value: ${{ jobs.summary.outputs.build-successful }}
  push:
    branches: [main, develop]
    tags: ['v*']

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY_IMAGE_DOCKERHUB: dextaco/harbor
  REGISTRY_IMAGE_GHCR: ghcr.io/deusextaco/harbor

jobs:
  # =============================================================================
  # Build Configuration
  # =============================================================================
  build-config:
    name: Build Configuration
    runs-on: ubuntu-latest

    outputs:
      docker-tags: ${{ steps.config.outputs.docker-tags }}
      ghcr-tags: ${{ steps.config.outputs.ghcr-tags }}
      dockerfile: ${{ steps.config.outputs.dockerfile }}
      should-build: ${{ steps.config.outputs.should-build }}
      harbor-version: ${{ steps.config.outputs.harbor-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine build configuration
        id: config
        run: |
          # Determine if we should build
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "📄 Pull request - skipping build"
            exit 0
          else
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

          # Extract version from pyproject.toml for proper tagging
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "harbor-version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Detected version: $VERSION"

          # Determine tags and dockerfile based on ref with explicit validation
          if [ "${{ github.ref_type }}" = "tag" ]; then
            # For tagged releases
            TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$TAG_VERSION,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:$TAG_VERSION,${{ env.REGISTRY_IMAGE_GHCR }}:latest" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile" >> $GITHUB_OUTPUT
            echo "🏷️ Tag release - using production Dockerfile with version tags: $TAG_VERSION, latest"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Main branch - production build
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$VERSION" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:latest,${{ env.REGISTRY_IMAGE_GHCR }}:$VERSION" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile" >> $GITHUB_OUTPUT
            echo "📦 Main branch - using production Dockerfile with 'latest' and version tags"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            # Develop branch - development build
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:develop,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$VERSION-dev" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:develop,${{ env.REGISTRY_IMAGE_GHCR }}:$VERSION-dev" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "📦 Develop branch - using dev Dockerfile with 'develop' and dev version tags"
          else
            # Feature branches - development build with branch name
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$BRANCH_NAME,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$VERSION-$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:$BRANCH_NAME,${{ env.REGISTRY_IMAGE_GHCR }}:$VERSION-$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "dockerfile=deploy/docker/Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "📦 Feature branch ($BRANCH_NAME) - using dev Dockerfile with branch tags"
          fi

  # =============================================================================
  # Docker Build & Push
  # =============================================================================
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [build-config]
    if: needs.build-config.outputs.should-build == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to registries with error handling
      - name: Log in to Docker Hub
        if: env.REGISTRY_IMAGE_DOCKERHUB != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Validate Dockerfile exists
      - name: Validate Dockerfile
        run: |
          DOCKERFILE="${{ needs.build-config.outputs.dockerfile }}"
          if [ ! -f "$DOCKERFILE" ]; then
            echo "❌ Dockerfile not found: $DOCKERFILE"
            ls -la deploy/docker/
            exit 1
          fi
          echo "✅ Using Dockerfile: $DOCKERFILE"

      # Extract metadata using docker/metadata-action (no here-docs)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE_DOCKERHUB }}
            ${{ env.REGISTRY_IMAGE_GHCR }}
          labels: |
            org.opencontainers.image.title=Harbor Container Updater
            org.opencontainers.image.description=Automated Docker container updates for home labs and enterprises
            org.opencontainers.image.source=https://github.com/DeusExTaco/harbor
            org.opencontainers.image.documentation=https://harbor-docs.dev
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=Harbor Team
            org.opencontainers.image.version=${{ needs.build-config.outputs.harbor-version }}
            harbor.milestone=M0
            harbor.deployment-profile=homelab

      # Build and push to Docker Hub
      - name: Build and push to Docker Hub
        if: env.REGISTRY_IMAGE_DOCKERHUB != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ needs.build-config.outputs.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ needs.build-config.outputs.docker-tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push to GHCR
      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ needs.build-config.outputs.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ needs.build-config.outputs.ghcr-tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Output build information for debugging
      - name: Build information
        run: |
          echo "🏗️ Build completed successfully!"
          echo "📦 Docker Hub tags: ${{ needs.build-config.outputs.docker-tags }}"
          echo "📦 GHCR tags: ${{ needs.build-config.outputs.ghcr-tags }}"
          echo "🐳 Dockerfile: ${{ needs.build-config.outputs.dockerfile }}"
          echo "🌐 Platform: linux/amd64"
          echo "📝 Git SHA: ${{ github.sha }}"
          echo "🏷️ Version: ${{ needs.build-config.outputs.harbor-version }}"

  # =============================================================================
  # Image Testing & Validation
  # =============================================================================
  test:
    name: Test Images
    runs-on: ubuntu-latest
    needs: [build-config, build]
    if: needs.build-config.outputs.should-build == 'true'

    strategy:
      matrix:
        registry: ['dockerhub', 'ghcr']
      fail-fast: false

    steps:
      - name: Set image reference
        id: image-ref
        run: |
          if [ "${{ matrix.registry }}" = "dockerhub" ]; then
            IMAGE_REF=$(echo "${{ needs.build-config.outputs.docker-tags }}" | cut -d',' -f1)
          else
            IMAGE_REF=$(echo "${{ needs.build-config.outputs.ghcr-tags }}" | cut -d',' -f1)
          fi
          echo "image-ref=$IMAGE_REF" >> $GITHUB_OUTPUT
          echo "🧪 Testing image: $IMAGE_REF"

      # Test basic image functionality
      - name: Test image basics
        run: |
          echo "🧪 Testing ${{ matrix.registry }} image..."
          docker run --rm ${{ steps.image-ref.outputs.image-ref }} python -c "
          import sys
          print('✅ ${{ matrix.registry }} image works!')
          print(f'Python version: {sys.version}')

          try:
              import app
              print(f'✅ Harbor version: {app.__version__}')
              print(f'✅ Milestone: {app.__milestone__}')
              print(f'✅ Status: {app.__status__}')
          except ImportError as e:
              print(f'❌ Harbor app import failed: {e}')
              exit(1)
          except AttributeError as e:
              print(f'⚠️ Harbor app missing attributes: {e}')

          try:
              import fastapi
              print('✅ FastAPI available')
          except ImportError:
              print('⚠️ FastAPI not available')
          "

      # Test container startup (quick test)
      - name: Test container startup
        run: |
          echo "🧪 Testing container startup for ${{ matrix.registry }}..."

          # Start container in background
          CONTAINER_NAME="harbor-test-${{ matrix.registry }}-${{ github.run_number }}"
          docker run -d --name $CONTAINER_NAME -p 8080:8080 ${{ steps.image-ref.outputs.image-ref }}

          # Wait for startup with timeout
          echo "⏳ Waiting for application startup..."
          for i in {1..30}; do
            if docker exec $CONTAINER_NAME python scripts/health_check.py; then
              echo "✅ Container started successfully"
              break
            fi
            sleep 2
            if [ $i -eq 30 ]; then
              echo "❌ Container failed to start within 60 seconds"
              docker logs $CONTAINER_NAME
              exit 1
            fi
          done

          # Test health endpoint via HTTP
          echo "🔍 Testing HTTP endpoints..."
          if curl -f -s http://localhost:8080/healthz; then
            echo "✅ Health endpoint working"
          else
            echo "❌ Health endpoint failed"
            docker logs $CONTAINER_NAME
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_NAME
          docker rm $CONTAINER_NAME

  # =============================================================================
  # Build Summary
  # =============================================================================
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-config, build, test]
    if: always()

    outputs:
      image-tags: ${{ steps.output.outputs.image-tags }}
      build-successful: ${{ steps.output.outputs.build-successful }}

    steps:
      - name: Set outputs and generate summary
        id: output
        run: |
          # Determine if build was successful
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "build-successful=true" >> $GITHUB_OUTPUT
            BUILD_STATUS="✅ SUCCESS"
          else
            echo "build-successful=false" >> $GITHUB_OUTPUT
            BUILD_STATUS="❌ FAILED"
          fi

          # Set image tags output
          if [ "${{ needs.build-config.outputs.should-build }}" = "true" ]; then
            DOCKER_TAG="${{ needs.build-config.outputs.docker-tags }}"
            GHCR_TAG="${{ needs.build-config.outputs.ghcr-tags }}"
            echo "image-tags=${DOCKER_TAG},${GHCR_TAG}" >> $GITHUB_OUTPUT
          else
            echo "image-tags=" >> $GITHUB_OUTPUT
          fi

          # Generate summary using simple echo statements
          echo "🎉 Harbor Docker Build Summary"
          echo "============================"
          echo ""
          echo "📋 Build Status: ${BUILD_STATUS}"
          echo "🔧 Branch: ${{ github.ref_name }}"
          echo "📦 Dockerfile: ${{ needs.build-config.outputs.dockerfile }}"
          echo "🗏️ Platform: linux/amd64"
          echo "📝 Commit: ${{ github.sha }}"
          echo "🏷️ Version: ${{ needs.build-config.outputs.harbor-version }}"
          echo ""

          if [ "${{ needs.build-config.outputs.should-build }}" = "true" ]; then
            echo "📦 Published Images:"
            echo "• Docker Hub: ${{ needs.build-config.outputs.docker-tags }}"
            echo "• GHCR: ${{ needs.build-config.outputs.ghcr-tags }}"
            echo ""
            echo "🔗 Repository Links:"
            echo "• https://hub.docker.com/r/dextaco/harbor"
            echo "• https://github.com/DeusExTaco/harbor/pkgs/container/harbor"
            echo ""
            echo "📥 Quick Start:"
            MAIN_TAG=$(echo "${{ needs.build-config.outputs.ghcr-tags }}" | cut -d',' -f1)
            echo "docker run -d -p 8080:8080 $MAIN_TAG"
          else
            echo "ℹ️ Build skipped for pull request"
          fi

          echo ""
          echo "🎯 M0 Milestone Status: Foundation Complete"
          echo "📋 Next: M1 Container Discovery & Registry Integration"
