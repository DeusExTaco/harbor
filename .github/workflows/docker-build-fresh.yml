name: Docker Build (Fresh Repository Setup)

on:
  workflow_call:
    outputs:
      image-tags:
        description: "Published image all tags"
        value: ${{ jobs.build-summary.outputs.image-tags }}
      build-successful:
        description: "Whether build was successful"
        value: ${{ jobs.build-summary.outputs.build-successful }}
  push:
    branches: [main, develop]
    tags: ['v*']

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build-fresh:
    name: Build Fresh Repository Images
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine tags
        id: tags
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "DOCKER_TAGS=dextaco/harbor:latest" >> $GITHUB_ENV
            echo "GHCR_TAGS=ghcr.io/deusextaco/harbor:latest" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "DOCKER_TAGS=dextaco/harbor:develop" >> $GITHUB_ENV
            echo "GHCR_TAGS=ghcr.io/deusextaco/harbor:develop" >> $GITHUB_ENV
          else
            echo "DOCKER_TAGS=dextaco/harbor:latest" >> $GITHUB_ENV
            echo "GHCR_TAGS=ghcr.io/deusextaco/harbor:latest" >> $GITHUB_ENV
          fi

      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Login to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push to Docker Hub (AMD64 only, proper tagging)
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/docker/Dockerfile.dev
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push to GHCR (AMD64 only, proper tagging)
      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/docker/Dockerfile.dev
          platforms: linux/amd64
          push: true
          tags: ${{ env.GHCR_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Test the images work
      - name: Test Docker Hub image
        run: |
          echo "🧪 Testing Docker Hub image..."
          docker run --rm ${{ env.DOCKER_TAGS }} python -c "
          import sys
          print('✅ Docker Hub image works!')
          print(f'Python version: {sys.version}')
          try:
              import fastapi
              print('✅ FastAPI available')
          except ImportError:
              print('⚠️  FastAPI not available')
          try:
              import app
              print('✅ Harbor app module available')
              print(f'Harbor version: {app.__version__}')
              print(f'Milestone: {app.__milestone__}')
          except ImportError as e:
              print(f'❌ Harbor app import failed: {e}')
          "

      - name: Test GHCR image
        run: |
          echo "🧪 Testing GHCR image..."
          docker run --rm ${{ env.GHCR_TAGS }} python -c "
          import sys
          print('✅ GHCR image works!')
          print(f'Python version: {sys.version}')
          try:
              import fastapi
              print('✅ FastAPI available')
          except ImportError:
              print('⚠️  FastAPI not available')
          try:
              import app
              print('✅ Harbor app module available')
              print(f'Harbor version: {app.__version__}')
              print(f'Milestone: {app.__milestone__}')
          except ImportError as e:
              print(f'❌ Harbor app import failed: {e}')
          "

      # Test FastAPI application
      - name: Test FastAPI endpoints
        run: |
          echo "🧪 Testing FastAPI application..."
          # Start container in background
          docker run -d --name harbor-test -p 8080:8080 ${{ env.DOCKER_TAGS }}

          # Wait for startup
          sleep 10

          # Test endpoints
          echo "Testing /healthz endpoint..."
          curl -f http://localhost:8080/healthz || echo "Health endpoint failed"

          echo "Testing / endpoint..."
          curl -f http://localhost:8080/ || echo "Root endpoint failed"

          echo "Testing /version endpoint..."
          curl -f http://localhost:8080/version || echo "Version endpoint failed"

          # Cleanup
          docker stop harbor-test
          docker rm harbor-test

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-fresh]

    outputs:
      image-tags: ${{ steps.output.outputs.image-tags }}
      build-successful: ${{ steps.output.outputs.build-successful }}

    steps:
      - name: Generate summary
        id: output
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TAGS="dextaco/harbor:latest,ghcr.io/deusextaco/harbor:latest"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            TAGS="dextaco/harbor:develop,ghcr.io/deusextaco/harbor:develop"
          else
            TAGS="dextaco/harbor:latest,ghcr.io/deusextaco/harbor:latest"
          fi

          echo "image-tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "build-successful=true" >> $GITHUB_OUTPUT

          echo "🎉 Harbor Fresh Repository Build Complete!"
          echo "======================================="
          echo ""
          echo "📦 Published Images:"
          echo "• Docker Hub: $(echo $TAGS | cut -d',' -f1)"
          echo "• GHCR: $(echo $TAGS | cut -d',' -f2)"
          echo ""
          echo "🏗️  Architecture: linux/amd64 (single platform)"
          echo "🔧 Build Type: Development image with FastAPI"
          echo "📋 Branch: ${{ github.ref_name }}"
          echo ""
          echo "📥 Quick Start:"
          echo "docker run -d -p 8080:8080 $(echo $TAGS | cut -d',' -f1)"
          echo "# Then visit http://localhost:8080"
