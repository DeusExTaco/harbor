name: Harbor CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Disable pip progress bars and warnings in CI
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_PROGRESS_BAR: off

jobs:
  # =============================================================================
  # Code Quality Checks
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run ruff linter
        run: ruff check app/ tests/

      - name: Run ruff formatter check
        run: ruff format --check app/ tests/

      - name: Run mypy type checker
        run: mypy app/ tests/

      - name: Run bandit security check
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # =============================================================================
  # Test Suite
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Create test data directory
        run: mkdir -p data

      - name: Run unit tests
        run: pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
        env:
          HARBOR_MODE: development
          DATABASE_URL: sqlite:///data/test.db

      - name: Run integration tests
        run: pytest tests/integration/ -v
        env:
          HARBOR_MODE: development
          DATABASE_URL: sqlite:///data/test_integration.db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.13'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # Docker Build Test
  # =============================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        run: |
          docker build -t harbor:test -f deploy/docker/Dockerfile.dev .

      - name: Test Docker image
        run: |
          docker run --rm harbor:test python -c "
          import sys
          print('✅ Docker image builds successfully')
          print(f'✅ Python version: {sys.version}')
          try:
              import app
              print('✅ Harbor app module imports successfully')
          except ImportError:
              print('ℹ️  Harbor app module not yet implemented - expected during M0')
              print('✅ Base environment working correctly')
          "

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # =============================================================================
  # Performance Testing (Future)
  # =============================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: false  # Disabled until we have performance tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run performance tests
        run: pytest tests/performance/ -v

  # =============================================================================
  # Documentation Check
  # =============================================================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README links
        run: |
          # Simple check that README exists and has basic content
          if [ ! -f README.md ]; then
            echo "❌ README.md is missing"
            exit 1
          fi
          if ! grep -q "Harbor Container Updater" README.md; then
            echo "❌ README.md missing project title"
            exit 1
          fi
          echo "✅ Documentation check passed"

  # =============================================================================
  # Deployment Readiness Check
  # =============================================================================
  deploy-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [quality, test, docker, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          # Extract version from pyproject.toml
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          version = data['project']['version']
          print(f'✅ Project version: {version}')
          "

      - name: Deployment readiness summary
        run: |
          echo "✅ All checks passed - ready for deployment"
          echo "- Code quality: PASSED"
          echo "- Tests: PASSED"
          echo "- Security: PASSED"
          echo "- Docker build: PASSED"
          echo "- Documentation: PASSED"
