name: Harbor CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

# Comprehensive permissions for all workflow operations
permissions:
  actions: read
  contents: write  # Enhanced: needed for release creation
  security-events: write
  pull-requests: write
  issues: write
  packages: write

env:
  # Global environment variables
  HARBOR_VERSION: "0.1.0-alpha.2"
  HARBOR_MILESTONE: "M0"
  REGISTRY_IMAGE_DOCKERHUB: dextaco/harbor
  REGISTRY_IMAGE_GHCR: ghcr.io/deusextaco/harbor

jobs:
  # =============================================================================
  # Stage 1: Parallel Static Analysis & Fast Checks
  # =============================================================================

  # Fast code quality checks (runs immediately)
  code-quality:
    name: Code Quality & Linting
    uses: ./.github/workflows/test.yml
    secrets: inherit # pragma: allowlist secret
    with:
      stage: "quality"

  # Static security analysis (runs in parallel with quality)
  static-security:
    name: Static Security Analysis
    uses: ./.github/workflows/codeql.yml
    secrets: inherit # pragma: allowlist secret

  # Dependency scanning (runs in parallel)
  dependency-security:
    name: Dependency Security
    uses: ./.github/workflows/dependency-review.yml
    secrets: inherit # pragma: allowlist secret

  # =============================================================================
  # Stage 2: Comprehensive Test Suite (After Quality Gate)
  # =============================================================================

  test-suite:
    name: Full Test Suite
    needs: [code-quality]  # Wait for linting to pass
    uses: ./.github/workflows/test.yml
    secrets: inherit # pragma: allowlist secret
    with:
      stage: "full-tests"

  # =============================================================================
  # Stage 3: Build Configuration (Determine build strategy)
  # =============================================================================

  build-config:
    name: Build Configuration
    runs-on: ubuntu-latest
    needs: [test-suite, static-security, dependency-security]
    if: |
      always() &&
      needs.test-suite.outputs.tests-passed == 'true' &&
      (needs.static-security.result == 'success' || needs.static-security.result == 'skipped') &&
      (needs.dependency-security.result == 'success' || needs.dependency-security.result == 'skipped')

    outputs:
      should-build: ${{ steps.config.outputs.should-build }}
      is-release: ${{ steps.config.outputs.is-release }}
      docker-tags: ${{ steps.config.outputs.docker-tags }}
      ghcr-tags: ${{ steps.config.outputs.ghcr-tags }}
      version: ${{ steps.config.outputs.version }}
      milestone: ${{ steps.config.outputs.milestone }}
      is-prerelease: ${{ steps.config.outputs.is-prerelease }}
      platforms: ${{ steps.config.outputs.platforms }}
      build-mode: ${{ steps.config.outputs.build-mode }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure multi-architecture build strategy
        id: config
        run: |
          # Determine if this is a release (tag push)
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "platforms=linux/amd64,linux/arm64,linux/arm/v7" >> $GITHUB_OUTPUT
            echo "build-mode=production" >> $GITHUB_OUTPUT

            # Extract version from tag
            VERSION="${{ github.ref_name }}"  # e.g., v0.1.0-alpha.2
            VERSION_CLEAN="${VERSION#v}"      # Remove 'v' prefix
            echo "version=$VERSION_CLEAN" >> $GITHUB_OUTPUT

            # Determine milestone from version
            case "$VERSION_CLEAN" in
              0.1.*) MILESTONE="M0" ;;
              0.2.*) MILESTONE="M1" ;;
              0.3.*) MILESTONE="M2" ;;
              0.4.*) MILESTONE="M3" ;;
              0.5.*) MILESTONE="M4" ;;
              0.6.*) MILESTONE="M5" ;;
              1.0.*) MILESTONE="M6" ;;
              *) MILESTONE="M0" ;;
            esac
            echo "milestone=$MILESTONE" >> $GITHUB_OUTPUT

            # Check if prerelease
            if [[ "$VERSION_CLEAN" =~ (alpha|beta|rc|dev) ]]; then
              echo "is-prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
            fi

            # Set release tags
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$VERSION_CLEAN,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:$VERSION_CLEAN,${{ env.REGISTRY_IMAGE_GHCR }}:latest" >> $GITHUB_OUTPUT

            echo "🏷️ RELEASE BUILD for $VERSION (milestone: $MILESTONE) - ALL PLATFORMS"

          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "platforms=linux/amd64,linux/arm64,linux/arm/v7" >> $GITHUB_OUTPUT  # Full multi-arch for main
            echo "build-mode=production" >> $GITHUB_OUTPUT
            echo "version=${{ env.HARBOR_VERSION }}" >> $GITHUB_OUTPUT
            echo "milestone=${{ env.HARBOR_MILESTONE }}" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT

            # Set development tags
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:main" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:latest,${{ env.REGISTRY_IMAGE_GHCR }}:main" >> $GITHUB_OUTPUT

            echo "📦 MAIN BRANCH BUILD - ALL PLATFORMS"

          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT  # AMD64 only for dev speed
            echo "build-mode=development" >> $GITHUB_OUTPUT
            echo "version=${{ env.HARBOR_VERSION }}-dev" >> $GITHUB_OUTPUT
            echo "milestone=${{ env.HARBOR_MILESTONE }}" >> $GITHUB_OUTPUT
            echo "is-prerelease=true" >> $GITHUB_OUTPUT

            # Set develop tags
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:develop" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:develop" >> $GITHUB_OUTPUT

            echo "🔧 DEVELOP BRANCH BUILD - AMD64 ONLY (for speed)"

          else
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
            echo "build-mode=development" >> $GITHUB_OUTPUT
            echo "version=${{ env.HARBOR_VERSION }}" >> $GITHUB_OUTPUT
            echo "milestone=${{ env.HARBOR_MILESTONE }}" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT

            echo "🔄 PULL REQUEST - Build skipped"
          fi

  # =============================================================================
  # Stage 4: Multi-Architecture Docker Build & Publish
  # =============================================================================

  docker-build:
    name: Multi-Architecture Docker Build
    needs: [build-config]
    if: needs.build-config.outputs.should-build == 'true'
    uses: ./.github/workflows/docker-build.yml
    secrets: inherit # pragma: allowlist secret
    with:
      platforms: ${{ needs.build-config.outputs.platforms }}

  # =============================================================================
  # Stage 5: Container Security Scanning (Platform-Aware)
  # =============================================================================

  container-security:
    name: Multi-Platform Container Security
    needs: [build-config, docker-build]
    if: |
      always() &&
      needs.docker-build.outputs.build-successful == 'true'
    uses: ./.github/workflows/security.yml
    secrets: inherit # pragma: allowlist secret
    with:
      scan-type: "container"
      image-tags: ${{ needs.docker-build.outputs.image-tags }}

  # =============================================================================
  # Stage 6: GitHub Release Creation (Only for tags)
  # =============================================================================

  create-github-release:
    name: Create GitHub Release
    needs: [build-config, docker-build, container-security]
    if: |
      always() &&
      needs.build-config.outputs.is-release == 'true' &&
      needs.docker-build.outputs.build-successful == 'true' &&
      (needs.container-security.result == 'success' || needs.container-security.result == 'skipped')
    runs-on: ubuntu-latest

    outputs:
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Generate multi-platform release notes
        id: release-notes
        run: |
          VERSION="${{ needs.build-config.outputs.version }}"
          MILESTONE="${{ needs.build-config.outputs.milestone }}"
          PLATFORMS="${{ needs.docker-build.outputs.platforms-built }}"

          # Get previous tag for changelog
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Create enhanced release notes with multi-platform info
          cat > release-notes.md << EOF
          Harbor Container Updater $VERSION - $MILESTONE Milestone

          🎯 **$MILESTONE Phase**: $([ "$MILESTONE" = "M0" ] && echo "Foundation Complete" || echo "Development Phase")
          🏗️ **Multi-Platform**: Now supports $(echo "$PLATFORMS" | tr ',' ', ')

          ## 🚀 Quick Start

          ### Universal (Auto-detects Platform)
          \`\`\`bash
          docker run -d --name harbor --restart unless-stopped \\
            -p 8080:8080 \\
            -v /var/run/docker.sock:/var/run/docker.sock:ro \\
            -v harbor-data:/app/data \\
            ghcr.io/deusextaco/harbor:$VERSION
          \`\`\`

          ### Platform-Specific Optimizations

          **🖥️ x86_64 / Intel / AMD:**
          \`\`\`bash
          docker run -d --name harbor --restart unless-stopped \\
            -p 8080:8080 \\
            -v /var/run/docker.sock:/var/run/docker.sock:ro \\
            -v harbor-data:/app/data \\
            ghcr.io/deusextaco/harbor:$VERSION
          \`\`\`

          **🍎 Apple Silicon (M1/M2/M3):**
          \`\`\`bash
          docker run -d --name harbor --restart unless-stopped \\
            -p 8080:8080 \\
            -v /var/run/docker.sock:/var/run/docker.sock:ro \\
            -v harbor-data:/app/data \\
            ghcr.io/deusextaco/harbor:$VERSION
          \`\`\`
          *Native ARM64 - no emulation needed!*

          **🥧 Raspberry Pi 4 (ARM64):**
          \`\`\`bash
          docker run -d --name harbor --restart unless-stopped \\
            -p 8080:8080 \\
            -v /var/run/docker.sock:/var/run/docker.sock:ro \\
            -v harbor-data:/app/data \\
            -e HARBOR_MAX_WORKERS=2 \\
            -e MAX_CONCURRENT_UPDATES=1 \\
            ghcr.io/deusextaco/harbor:$VERSION
          \`\`\`

          **🥧 Raspberry Pi 3 (ARMv7):**
          \`\`\`bash
          docker run -d --name harbor --restart unless-stopped \\
            -p 8080:8080 \\
            -v /var/run/docker.sock:/var/run/docker.sock:ro \\
            -v harbor-data:/app/data \\
            -e HARBOR_MAX_WORKERS=1 \\
            -e MAX_CONCURRENT_UPDATES=1 \\
            -e LOG_RETENTION_DAYS=7 \\
            ghcr.io/deusextaco/harbor:$VERSION
          \`\`\`

          Dashboard: http://localhost:8080

          ## 📦 Available Images

          **Multi-Platform Manifest:**
          - \`ghcr.io/deusextaco/harbor:$VERSION\`
          - \`dextaco/harbor:$VERSION\`

          **Platform-Specific (if needed):**
          - \`ghcr.io/deusextaco/harbor:$VERSION-amd64\`
          - \`ghcr.io/deusextaco/harbor:$VERSION-arm64\`
          - \`ghcr.io/deusextaco/harbor:$VERSION-armv7\`

          ## 🗔️ M0 Foundation Features

          - ✅ **Multi-Architecture Support**: Native builds for AMD64, ARM64, and ARMv7
          - ✅ **Zero-Configuration Deployment**: Works out of the box on all platforms
          - ✅ **Platform Optimization**: Automatic resource tuning based on architecture
          - ✅ **FastAPI Framework**: High-performance async web framework
          - ✅ **SQLite Database**: Zero-config database with automatic migrations
          - ✅ **Profile-Based Configuration**: homelab, development, production profiles
          - ✅ **Comprehensive Health Checks**: Multi-dimensional health monitoring
          - ✅ **Complete CI/CD Pipeline**: Multi-stage testing with security scanning
          - ✅ **Cross-Platform Testing**: Automated testing on all target architectures
          - ✅ **Security Scanning**: Static analysis and container vulnerability scanning
          - ✅ **Development Environment**: Hot reload with full tooling support

          ## 🛣️ What's Next

          **M1 Milestone (Container Discovery & Registry Integration)**
          - Automatic container discovery with change detection
          - Multi-registry support (Docker Hub, GHCR, private registries)
          - Intelligent caching and rate limiting
          - Container specification analysis and tracking
          - **Enhanced ARM Support**: Optimized discovery for ARM-based home labs

          ## 📱 Platform Compatibility

          Harbor automatically detects your platform and optimizes accordingly:

          | Platform | Architecture | Status | Optimizations |
          |----------|-------------|---------|---------------|
          | Intel/AMD | linux/amd64 | ✅ Native | Full performance |
          | Apple Silicon | linux/arm64 | ✅ Native | Balanced performance |
          | Raspberry Pi 4 | linux/arm64 | ✅ Native | Resource-conscious |
          | Raspberry Pi 3 | linux/arm/v7 | ✅ Native | Memory-optimized |
          | ARM Servers | linux/arm64 | ✅ Native | Full performance |

          ## 🔧 Home Lab Examples

          **Basic Home Lab (works on all platforms):**
          \`\`\`bash
          curl -fsSL https://get.harbor.dev/docker-compose.yml | docker-compose -f - up -d
          \`\`\`

          **Raspberry Pi Optimized:**
          \`\`\`bash
          curl -fsSL https://get.harbor.dev/raspberry-pi.yml | docker-compose -f - up -d
          \`\`\`

          See full changelog and technical details at: https://github.com/DeusExTaco/harbor/releases/tag/v$VERSION
          EOF

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build-config.outputs.version }}
          release_name: Harbor ${{ needs.build-config.outputs.version }} - ${{ needs.build-config.outputs.milestone }} Milestone (Multi-Platform)
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: ${{ needs.build-config.outputs.is-prerelease }}

      - name: Upload Docker Compose examples
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: examples/home-lab/basic/docker-compose.yml
          asset_name: docker-compose-homelab.yml
          asset_content_type: application/x-yaml

      - name: Upload Raspberry Pi example
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: examples/home-lab/raspberry-pi/docker-compose.yml
          asset_name: docker-compose-raspberry-pi.yml
          asset_content_type: application/x-yaml

  # =============================================================================
  # Stage 7: Final Status & Multi-Platform Summary
  # =============================================================================

  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, static-security, dependency-security, test-suite, build-config, docker-build, container-security, create-github-release]
    if: always()

    steps:
      - name: Generate enhanced multi-platform pipeline summary
        run: |
          echo "# 🚀 Harbor Multi-Platform CI/CD Pipeline Summary" > pipeline-summary.md
          echo "Generated on: $(date -u)" >> pipeline-summary.md
          echo "Pipeline ID: ${{ github.run_id }}" >> pipeline-summary.md
          echo "Commit: ${{ github.sha }}" >> pipeline-summary.md
          echo "Event: ${{ github.event_name }}" >> pipeline-summary.md
          echo "Ref: ${{ github.ref }}" >> pipeline-summary.md
          echo "" >> pipeline-summary.md

          echo "## 📊 Pipeline Results" >> pipeline-summary.md
          echo "| Stage | Status | Duration |" >> pipeline-summary.md
          echo "|-------|--------|----------|" >> pipeline-summary.md
          echo "| 🔍 Code Quality | ${{ needs.code-quality.result }} | - |" >> pipeline-summary.md
          echo "| 🔒 Static Security | ${{ needs.static-security.result }} | - |" >> pipeline-summary.md
          echo "| 📦 Dependency Security | ${{ needs.dependency-security.result }} | - |" >> pipeline-summary.md
          echo "| 🧪 Test Suite | ${{ needs.test-suite.result }} | - |" >> pipeline-summary.md
          echo "| 🗔️ Build Config | ${{ needs.build-config.result }} | - |" >> pipeline-summary.md
          echo "| 🏗️ Multi-Arch Build | ${{ needs.docker-build.result }} | - |" >> pipeline-summary.md
          echo "| 🛡️ Container Security | ${{ needs.container-security.result }} | - |" >> pipeline-summary.md
          echo "| 🚀 GitHub Release | ${{ needs.create-github-release.result }} | - |" >> pipeline-summary.md
          echo "" >> pipeline-summary.md

          # Enhanced status determination with platform info
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-suite.result }}" == "success" ]]; then

            if [[ "${{ needs.build-config.outputs.is-release }}" == "true" ]]; then
              if [[ "${{ needs.docker-build.result }}" == "success" && \
                    "${{ needs.create-github-release.result }}" == "success" ]]; then
                echo "## 🎉 MULTI-PLATFORM RELEASE SUCCESSFUL!" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 🚀 Harbor ${{ needs.build-config.outputs.version }} Released!" >> pipeline-summary.md
                echo "- ✅ All tests passed" >> pipeline-summary.md
                echo "- ✅ Multi-architecture Docker images built and published" >> pipeline-summary.md
                echo "- ✅ Security scans completed" >> pipeline-summary.md
                echo "- ✅ GitHub release created" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 🏗️ Platform Support:" >> pipeline-summary.md
                echo "Built for: ${{ needs.build-config.outputs.platforms }}" >> pipeline-summary.md
                echo "Platforms tested: ${{ needs.docker-build.outputs.platforms-built }}" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 📦 Published Images:" >> pipeline-summary.md
                echo "- \`ghcr.io/deusextaco/harbor:${{ needs.build-config.outputs.version }}\` (multi-platform)" >> pipeline-summary.md
                echo "- \`dextaco/harbor:${{ needs.build-config.outputs.version }}\` (multi-platform)" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 🎯 Release Details:" >> pipeline-summary.md
                echo "- **Version**: ${{ needs.build-config.outputs.version }}" >> pipeline-summary.md
                echo "- **Milestone**: ${{ needs.build-config.outputs.milestone }}" >> pipeline-summary.md
                echo "- **Type**: ${{ needs.build-config.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable' }}" >> pipeline-summary.md
                echo "- **Platforms**: ${{ needs.build-config.outputs.platforms }}" >> pipeline-summary.md
                echo "- **Build Mode**: ${{ needs.build-config.outputs.build-mode }}" >> pipeline-summary.md
                if [[ "${{ needs.create-github-release.outputs.release-url }}" != "" ]]; then
                  echo "- **Release Notes**: ${{ needs.create-github-release.outputs.release-url }}" >> pipeline-summary.md
                fi
              else
                echo "## ⚠️ RELEASE FAILED!" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "Release creation failed - check the logs above." >> pipeline-summary.md
              fi
            else
              echo "## ✅ MULTI-PLATFORM BUILD SUCCESSFUL!" >> pipeline-summary.md
              echo "" >> pipeline-summary.md
              echo "### 🎉 All checks passed!" >> pipeline-summary.md
              if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
                echo "- ✅ Multi-architecture Docker images built and published" >> pipeline-summary.md
                echo "- ✅ Available for testing and deployment on all supported platforms" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 🏗️ Platform Details:" >> pipeline-summary.md
                echo "- **Built For**: ${{ needs.build-config.outputs.platforms }}" >> pipeline-summary.md
                echo "- **Tested On**: ${{ needs.docker-build.outputs.platforms-built }}" >> pipeline-summary.md
                echo "- **Build Mode**: ${{ needs.build-config.outputs.build-mode }}" >> pipeline-summary.md
              fi
            fi
          else
            echo "## ❌ PIPELINE FAILED!" >> pipeline-summary.md
            echo "" >> pipeline-summary.md
            echo "### 🚨 Critical issues found!" >> pipeline-summary.md
            if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
              echo "- ❌ Code quality checks failed" >> pipeline-summary.md
            fi
            if [[ "${{ needs.test-suite.result }}" != "success" ]]; then
              echo "- ❌ Test suite failed" >> pipeline-summary.md
            fi
          fi

          echo "" >> pipeline-summary.md
          echo "## 📋 Next Steps" >> pipeline-summary.md

          if [[ "${{ needs.build-config.outputs.is-release }}" == "true" ]]; then
            if [[ "${{ needs.docker-build.result }}" == "success" && \
                  "${{ needs.create-github-release.result }}" == "success" ]]; then
              echo "- 🎉 Multi-platform release is complete and ready for use!" >> pipeline-summary.md
              echo "- 📢 Announce the release to the community" >> pipeline-summary.md
              echo "- 🥧 Test on Raspberry Pi devices for ARM validation" >> pipeline-summary.md
              echo "- 📱 Update platform compatibility documentation" >> pipeline-summary.md
            else
              echo "- 🔧 Fix release issues and re-tag if necessary" >> pipeline-summary.md
              echo "- 🔍 Check workflow logs for specific errors" >> pipeline-summary.md
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "- 🔍 Review any failed checks above" >> pipeline-summary.md
            echo "- 🔧 Fix issues and push new commits" >> pipeline-summary.md
            echo "- ✅ Merge when all checks pass" >> pipeline-summary.md
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
              echo "- ✅ New multi-platform images are available for deployment" >> pipeline-summary.md
              echo "- 🔍 Review security scan results if needed" >> pipeline-summary.md
              echo "- 📦 Update deployment configs with new image tags" >> pipeline-summary.md
              echo "- 🥧 Test on ARM devices to validate cross-platform compatibility" >> pipeline-summary.md
            else
              echo "- 🔧 Fix build issues before deployment" >> pipeline-summary.md
            fi
          fi

          echo "" >> pipeline-summary.md
          echo "## 🗔️ Harbor Development Status" >> pipeline-summary.md
          echo "- **Version**: ${{ needs.build-config.outputs.version }}" >> pipeline-summary.md
          echo "- **Milestone**: ${{ needs.build-config.outputs.milestone }} (Foundation Phase)" >> pipeline-summary.md
          echo "- **Platform Support**: ${{ needs.build-config.outputs.platforms }}" >> pipeline-summary.md
          echo "- **Current Focus**: Multi-architecture foundation and CI/CD pipeline" >> pipeline-summary.md
          echo "- **Next Milestone**: M1 (Container Discovery & Registry Integration)" >> pipeline-summary.md
          echo "" >> pipeline-summary.md
          echo "## 🏗️ Architecture Support" >> pipeline-summary.md
          echo "Harbor now runs natively on:" >> pipeline-summary.md
          echo "- **Intel/AMD PCs**: Full performance with all features" >> pipeline-summary.md
          echo "- **Apple Silicon Macs**: Native ARM64 performance" >> pipeline-summary.md
          echo "- **Modern ARM Servers**: Optimized for ARM64 cloud instances" >> pipeline-summary.md
          echo "- **Raspberry Pi 4**: Resource-optimized ARM64 builds" >> pipeline-summary.md
          echo "- **Raspberry Pi 3**: Memory-optimized ARMv7 builds" >> pipeline-summary.md

          cat pipeline-summary.md

      - name: Upload pipeline summary
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary-multiarch-${{ github.run_number }}-${{ github.run_attempt }}
          path: pipeline-summary.md
          retention-days: 30

      - name: Set final pipeline status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-suite.result }}" == "success" ]]; then

            if [[ "${{ needs.build-config.outputs.is-release }}" == "true" ]]; then
              if [[ "${{ needs.docker-build.result }}" == "success" && \
                    "${{ needs.create-github-release.result }}" == "success" ]]; then
                echo "🎉 Harbor ${{ needs.build-config.outputs.version }} multi-platform release successful!"
                echo ""
                echo "🏗️ Platform Support: ${{ needs.build-config.outputs.platforms }}"
                echo ""
                echo "📦 Docker Images:"
                echo "- ghcr.io/deusextaco/harbor:${{ needs.build-config.outputs.version }}"
                echo "- dextaco/harbor:${{ needs.build-config.outputs.version }}"
                echo ""
                echo "🔗 Release URL: ${{ needs.create-github-release.outputs.release-url }}"
                echo ""
                echo "🥧 ARM Testing:"
                echo "- Raspberry Pi users can now use Harbor natively!"
                echo "- Apple Silicon Macs get native ARM64 performance"
                echo "- ARM cloud instances supported"
              else
                echo "❌ Multi-platform release creation failed!"
                exit 1
              fi
            else
              echo "✅ Harbor Multi-Platform CI/CD Pipeline completed successfully!"
              if [ "${{ needs.docker-build.result }}" == "success" ]; then
                echo "🏗️ New multi-architecture Docker images published"
                echo "📱 Platform support: ${{ needs.build-config.outputs.platforms }}"
                echo "🧪 Platform testing: ${{ needs.docker-build.outputs.platforms-built }}"
              fi
            fi
          else
            echo "❌ Harbor CI/CD Pipeline failed!"
            exit 1
          fi
