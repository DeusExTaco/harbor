name: Harbor CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'

# Comprehensive permissions for all workflow operations
permissions:
  actions: read
  contents: write  # Enhanced: needed for release creation
  security-events: write
  pull-requests: write
  issues: write
  packages: write

env:
  # Global environment variables
  HARBOR_VERSION: "0.1.0-alpha.3"
  HARBOR_MILESTONE: "M0"
  REGISTRY_IMAGE_DOCKERHUB: dextaco/harbor
  REGISTRY_IMAGE_GHCR: ghcr.io/deusextaco/harbor

jobs:

  pre-flight-check:
    name: Pre-flight Check
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.check.outputs.continue }}
      skip-reason: ${{ steps.check.outputs.reason }}

    steps:
      - name: Check skip conditions
        id: check
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          # Check for global skip
          if [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[ci skip]"* ]]; then
            echo "continue=false" >> $GITHUB_OUTPUT
            echo "reason=skip-ci-flag" >> $GITHUB_OUTPUT
            echo "::notice::CI pipeline skipped due to [skip ci] flag"
          # Check for docs-only changes (if last commit only touched docs)
          elif [[ "$COMMIT_MSG" == *"docs:"* ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            echo "continue=true" >> $GITHUB_OUTPUT  # Still run, but note it
            echo "reason=docs-change" >> $GITHUB_OUTPUT
            echo "::notice::Documentation change detected"
          else
            echo "continue=true" >> $GITHUB_OUTPUT
            echo "reason=" >> $GITHUB_OUTPUT
          fi

      - name: Generate skip summary
        if: steps.check.outputs.continue == 'false'
        run: |
          echo "## Pipeline Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Reason: ${{ steps.check.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Stage 1: Parallel Static Analysis & Fast Checks
  # =============================================================================

  # Fast code quality checks (runs immediately)
  code-quality:
    name: Code Quality & Linting
    needs: [ pre-flight-check ]  # ADD THIS
    if: needs.pre-flight-check.outputs.should-continue == 'true'
    uses: ./.github/workflows/test.yml
    secrets: inherit # pragma: allowlist secret
    with:
      stage: "quality"

  # Static security analysis (runs in parallel with quality)
  static-security:
    name: Static Security Analysis
    needs: [ pre-flight-check ]
    if: needs.pre-flight-check.outputs.should-continue == 'true'
    uses: ./.github/workflows/codeql.yml
    secrets: inherit # pragma: allowlist secret

  # Dependency scanning (runs in parallel)
  dependency-security:
    name: Dependency Security
    needs: [ pre-flight-check ]
    if: needs.pre-flight-check.outputs.should-continue == 'true'
    uses: ./.github/workflows/dependency-review.yml
    secrets: inherit # pragma: allowlist secret

  # =============================================================================
  # Stage 2: Comprehensive Test Suite (After Quality Gate)
  # =============================================================================

  test-suite:
    name: Full Test Suite
    needs: [ pre-flight-check, code-quality ]
    if: |
      needs.pre-flight-check.outputs.should-continue == 'true' &&
      needs.code-quality.result == 'success'
    uses: ./.github/workflows/test.yml
    secrets: inherit # pragma: allowlist secret
    with:
      stage: "full-tests"

  # =============================================================================
  # Stage 3: Build Configuration (Determine build strategy)
  # =============================================================================

  build-config:
    name: Build Configuration
    runs-on: ubuntu-latest
    needs: [ pre-flight-check, test-suite, static-security, dependency-security ]
    if: |
      always() &&
      needs.pre-flight-check.outputs.should-continue == 'true' &&
      needs.test-suite.outputs.tests-passed == 'true' &&
      (needs.static-security.result == 'success' || needs.static-security.result == 'skipped') &&
      (needs.dependency-security.result == 'success' || needs.dependency-security.result == 'skipped')

    outputs:
      should-build: ${{ steps.config.outputs.should-build }}
      is-release: ${{ steps.config.outputs.is-release }}
      docker-tags: ${{ steps.config.outputs.docker-tags }}
      ghcr-tags: ${{ steps.config.outputs.ghcr-tags }}
      version: ${{ steps.config.outputs.version }}
      milestone: ${{ steps.config.outputs.milestone }}
      is-prerelease: ${{ steps.config.outputs.is-prerelease }}
      skip-reason: ${{ steps.config.outputs.skip-reason }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure build strategy
        id: config
        run: |
          # Initialize skip reason
          SKIP_REASON=""

          # Extract version from app/__init__.py (source of truth)
          if [ -f "app/__init__.py" ]; then
            VERSION=$(python -c "
          import re
          with open('app/__init__.py', 'r') as f:
              content = f.read()
              match = re.search(r'__version__ = [\"']([^\"']+)[\"']', content)
              if match:
                  print(match.group(1))
          " || echo "${{ env.HARBOR_VERSION }}")

            # Also extract milestone from app/__init__.py
            MILESTONE=$(python -c "
          import re
          with open('app/__init__.py', 'r') as f:
              content = f.read()
              match = re.search(r'__milestone__ = [\"']([^\"']+)[\"']', content)
              if match:
                  print(match.group(1))
          " || echo "${{ env.HARBOR_MILESTONE }}")
          else
            # Fallback to environment variables
            VERSION="${{ env.HARBOR_VERSION }}"
            MILESTONE="${{ env.HARBOR_MILESTONE }}"
          fi

          # Check if tests failed (but allow override for tags and schedules)
          if [[ "${{ needs.test-suite.outputs.tests-passed }}" != "true" ]]; then
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              echo "⚠️ Tests failed but proceeding due to scheduled build"
            elif [[ "${{ github.ref_type }}" == "tag" ]]; then
              echo "⚠️ Tests failed but proceeding due to tag release"
            else
              echo "should-build=false" >> $GITHUB_OUTPUT
              echo "skip-reason=tests-failed" >> $GITHUB_OUTPUT
              echo "❌ Skipping build due to test failures"
              exit 0
            fi
          fi

          # Determine if this is a release (tag push)
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "skip-reason=" >> $GITHUB_OUTPUT

            # Use version from tag
            VERSION="${{ github.ref_name }}"  # e.g., v0.1.0-alpha.3
            VERSION_CLEAN="${VERSION#v}"      # Remove 'v' prefix
            echo "version=$VERSION_CLEAN" >> $GITHUB_OUTPUT
            echo "milestone=$MILESTONE" >> $GITHUB_OUTPUT

            # Check if prerelease
            if [[ "$VERSION_CLEAN" =~ (alpha|beta|rc|dev) ]]; then
              echo "is-prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
            fi

            # Set release tags
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$VERSION_CLEAN,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:$VERSION_CLEAN,${{ env.REGISTRY_IMAGE_GHCR }}:latest" >> $GITHUB_OUTPUT

            echo "🏷️ RELEASE BUILD for $VERSION (milestone: $MILESTONE)"

          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "skip-reason=" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "milestone=$MILESTONE" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT

            # Set development tags
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:main" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:latest,${{ env.REGISTRY_IMAGE_GHCR }}:main" >> $GITHUB_OUTPUT

            echo "📦 MAIN BRANCH BUILD"

          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "skip-reason=" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "milestone=$MILESTONE" >> $GITHUB_OUTPUT
            echo "is-prerelease=true" >> $GITHUB_OUTPUT

            # Set develop tags with version
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:develop,${{ env.REGISTRY_IMAGE_DOCKERHUB }}:$VERSION" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:develop,${{ env.REGISTRY_IMAGE_GHCR }}:$VERSION" >> $GITHUB_OUTPUT

            echo "🔧 DEVELOP BRANCH BUILD"

          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Scheduled builds should build from main/develop
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "skip-reason=" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "milestone=$MILESTONE" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT

            # Set nightly tags
            echo "docker-tags=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:nightly" >> $GITHUB_OUTPUT
            echo "ghcr-tags=${{ env.REGISTRY_IMAGE_GHCR }}:nightly" >> $GITHUB_OUTPUT

            echo "🌙 SCHEDULED/NIGHTLY BUILD"

          else
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "skip-reason=pull-request" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "milestone=$MILESTONE" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT

            echo "🔍 PULL REQUEST - Build skipped"
          fi

      - name: Output build decision summary
        if: always()
        run: |
          echo "## 🎯 Build Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Should Build | ${{ steps.config.outputs.should-build }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Is Release | ${{ steps.config.outputs.is-release }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ steps.config.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Milestone | ${{ steps.config.outputs.milestone }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Skip Reason | ${{ steps.config.outputs.skip-reason || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.config.outputs.should-build }}" == "true" ]]; then
            echo "### 🏷️ Docker Tags" >> $GITHUB_STEP_SUMMARY
            echo "- Docker Hub: ${{ steps.config.outputs.docker-tags }}" >> $GITHUB_STEP_SUMMARY
            echo "- GHCR: ${{ steps.config.outputs.ghcr-tags }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⏭️ Build Skipped" >> $GITHUB_STEP_SUMMARY
            echo "Reason: ${{ steps.config.outputs.skip-reason }}" >> $GITHUB_STEP_SUMMARY
          fi

  # =============================================================================
  # Stage 4: Docker Build & Publish (Enhanced for releases)
  # =============================================================================

  docker-build:
    name: Docker Build & Publish
    needs: [ pre-flight-check, build-config ]
    if: |
      needs.pre-flight-check.outputs.should-continue == 'true' &&
      needs.build-config.outputs.should-build == 'true'
    uses: ./.github/workflows/docker-build.yml
    secrets: inherit # pragma: allowlist secret
    with:
      force-build: false

  # =============================================================================
  # Stage 5: Complete Container Security Scanning
  # =============================================================================

  container-security:
    name: Container Security Scan
    needs: [ pre-flight-check, build-config, docker-build ]
    if: |
      always() &&
      needs.pre-flight-check.outputs.should-continue == 'true' &&
      needs.docker-build.outputs.build-successful == 'true'
    uses: ./.github/workflows/security.yml
    secrets: inherit # pragma: allowlist secret
    with:
      scan-type: "container"
      image-tags: ${{ needs.docker-build.outputs.image-tags }}


  # =============================================================================
  # Stage 5.5: Registry Cleanup & Retention
  # =============================================================================

  registry-retention:
    name: Registry Cleanup & Retention
    runs-on: ubuntu-latest
    needs: [ pre-flight-check, docker-build, container-security ]
    if: |
      always() &&
      needs.pre-flight-check.outputs.should-continue == 'true' &&
      needs.docker-build.outputs.build-successful == 'true' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup cleanup configuration
        id: config
        run: |
          # Configuration based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "keep_versions=10" >> $GITHUB_OUTPUT
            echo "keep_days=30" >> $GITHUB_OUTPUT
            echo "delete_untagged=false" >> $GITHUB_OUTPUT
          else
            echo "keep_versions=5" >> $GITHUB_OUTPUT
            echo "keep_days=7" >> $GITHUB_OUTPUT
            echo "delete_untagged=true" >> $GITHUB_OUTPUT
          fi

          # Protected tags that should never be deleted
          echo "protected_tags=latest,develop,main" >> $GITHUB_OUTPUT

      # GHCR Cleanup using action
      - name: Cleanup GHCR old versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'harbor'
          package-type: 'container'
          min-versions-to-keep: ${{ steps.config.outputs.keep_versions }}
          delete-only-pre-release-versions: false
          delete-only-untagged-versions: ${{ steps.config.outputs.delete_untagged }}
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Advanced GHCR cleanup
      - name: Advanced GHCR cleanup
        run: |
          PACKAGE="harbor"
          OWNER="${{ github.repository_owner }}"
          KEEP_VERSIONS="${{ steps.config.outputs.keep_versions }}"
          KEEP_DAYS="${{ steps.config.outputs.keep_days }}"
          PROTECTED_TAGS="${{ steps.config.outputs.protected_tags }}"

          # Calculate cutoff date (Linux date command)
          CUTOFF_DATE=$(date -d "$KEEP_DAYS days ago" -Iseconds)

          echo "Cleaning up GHCR packages older than $CUTOFF_DATE"

          # Get all versions
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/users/$OWNER/packages/container/$PACKAGE/versions?per_page=100" \
            --paginate 2>/dev/null || echo "[]")

          if [ "$VERSIONS" != "[]" ]; then
            # Process versions
            echo "$VERSIONS" | jq -r --arg cutoff "$CUTOFF_DATE" --arg protected "$PROTECTED_TAGS" '
              .[] |
              select(.created_at < $cutoff) |
              select(.metadata.container.tags | length == 0 or
                     (.metadata.container.tags | map(. as $tag | $protected | split(",") | index($tag) | not) | all)) |
              .id' | \
            while read -r VERSION_ID; do
              if [ -n "$VERSION_ID" ]; then
                echo "Deleting old GHCR version: $VERSION_ID"
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  "/users/$OWNER/packages/container/$PACKAGE/versions/$VERSION_ID" 2>/dev/null || true
                sleep 0.5
              fi
            done
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Docker Hub Cleanup
      - name: Cleanup Docker Hub old tags
        run: |
          NAMESPACE="dextaco"
          REPONAME="harbor"
          KEEP_VERSIONS="${{ steps.config.outputs.keep_versions }}"
          KEEP_DAYS="${{ steps.config.outputs.keep_days }}"
          PROTECTED_TAGS="${{ steps.config.outputs.protected_tags }}"

          # Authenticate with Docker Hub
          echo "Authenticating with Docker Hub..."
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username":"${{ secrets.DOCKERHUB_USERNAME }}","password":"${{ secrets.DOCKERHUB_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
            echo "Failed to authenticate with Docker Hub - skipping cleanup"
            exit 0
          fi

          # Get all tags
          echo "Fetching Docker Hub tags..."
          RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "https://hub.docker.com/v2/namespaces/$NAMESPACE/repositories/$REPONAME/tags?page_size=100")

          if [ -z "$RESPONSE" ] || [ "$RESPONSE" == "null" ]; then
            echo "No tags found"
            exit 0
          fi

          # Calculate cutoff date (Unix timestamp for Linux)
          CUTOFF_TIMESTAMP=$(date -d "$KEEP_DAYS days ago" +%s)

          # Process tags
          echo "$RESPONSE" | jq -r --arg protected "$PROTECTED_TAGS" --arg cutoff "$CUTOFF_TIMESTAMP" '
            .results[] |
            select(.last_updated != null) |
            select((.last_updated | sub("\\.[0-9]+Z$"; "Z") | fromdate) < ($cutoff | tonumber)) |
            select(.name as $name | $protected | split(",") | index($name) | not) |
            .name' | \
          while read -r TAG; do
            if [ -n "$TAG" ]; then
              echo "Deleting old Docker Hub tag: $TAG"
              curl -s -X DELETE -H "Authorization: Bearer $TOKEN" \
                "https://hub.docker.com/v2/repositories/$NAMESPACE/$REPONAME/tags/$TAG/" || true
              sleep 0.5
            fi
          done
        continue-on-error: true

      - name: Generate cleanup report
        if: always()
        run: |
          echo "## 🧹 Registry Cleanup Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Keep Versions**: ${{ steps.config.outputs.keep_versions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Keep Days**: ${{ steps.config.outputs.keep_days }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Delete Untagged**: ${{ steps.config.outputs.delete_untagged }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Protected Tags**: ${{ steps.config.outputs.protected_tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Registries Cleaned" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Container Registry (ghcr.io)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Hub" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Stage 6: GitHub Release Creation (Only for tags) - SIMPLIFIED
  # =============================================================================

  create-github-release:
    name: Create GitHub Release
    needs: [ pre-flight-check, build-config, docker-build, container-security ]
    if: |
      always() &&
      needs.pre-flight-check.outputs.should-continue == 'true' &&
      needs.build-config.outputs.is-release == 'true' &&
      needs.docker-build.outputs.build-successful == 'true' &&
      (needs.container-security.result == 'success' || needs.container-security.result == 'skipped')
    runs-on: ubuntu-latest

    outputs:
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Generate simple release notes
        id: release-notes
        run: |
          VERSION="${{ needs.build-config.outputs.version }}"
          MILESTONE="${{ needs.build-config.outputs.milestone }}"

          # Create simple, focused release notes
          cat > release-notes.md << 'EOF'
          ## Harbor VERSION_PLACEHOLDER - MILESTONE_PLACEHOLDER

          ### Quick Start
          ```bash
          docker run -d --name harbor -p 8080:8080 \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            ghcr.io/deusextaco/harbor:VERSION_PLACEHOLDER
          ```

          ### What's New
          See [CHANGELOG.md](https://github.com/DeusExTaco/harbor/blob/vVERSION_PLACEHOLDER/CHANGELOG.md) for details.

          ### Docker Images
          - `ghcr.io/deusextaco/harbor:VERSION_PLACEHOLDER`
          - `dextaco/harbor:VERSION_PLACEHOLDER`

          ### Documentation
          - [Getting Started](https://github.com/DeusExTaco/harbor/blob/vVERSION_PLACEHOLDER/README.md)
          - [Configuration](https://github.com/DeusExTaco/harbor/tree/vVERSION_PLACEHOLDER/config)
          EOF

          # Replace placeholders
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" release-notes.md
          sed -i "s/MILESTONE_PLACEHOLDER/$MILESTONE/g" release-notes.md

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-config.outputs.version }}
          name: Harbor ${{ needs.build-config.outputs.version }} - ${{ needs.build-config.outputs.milestone }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.build-config.outputs.is-prerelease }}
          generate_release_notes: true  # GitHub auto-generates from PRs
          files: |
            examples/home-lab/basic/docker-compose.yml

  # =============================================================================
  # Stage 7: Final Status & Summary
  # =============================================================================

  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [ pre-flight-check, code-quality, static-security, dependency-security, test-suite, build-config, docker-build, container-security, create-github-release ]  # MODIFY - add pre-flight-check
    if: always()

    steps:
      - name: Generate enhanced pipeline summary
        run: |
          echo "# 🚀 Harbor CI/CD Pipeline Summary" > pipeline-summary.md
          echo "Generated on: $(date -u)" >> pipeline-summary.md
          echo "Pipeline ID: ${{ github.run_id }}" >> pipeline-summary.md
          echo "Commit: ${{ github.sha }}" >> pipeline-summary.md
          echo "Event: ${{ github.event_name }}" >> pipeline-summary.md
          echo "Ref: ${{ github.ref }}" >> pipeline-summary.md
          echo "" >> pipeline-summary.md

          echo "## 📊 Pipeline Results" >> pipeline-summary.md
          echo "| Stage | Status |" >> pipeline-summary.md
          echo "|-------|--------|" >> pipeline-summary.md
          echo "| 🔍 Code Quality | ${{ needs.code-quality.result }} |" >> pipeline-summary.md
          echo "| 🔒 Static Security | ${{ needs.static-security.result }} |" >> pipeline-summary.md
          echo "| 📦 Dependency Security | ${{ needs.dependency-security.result }} |" >> pipeline-summary.md
          echo "| 🧪 Test Suite | ${{ needs.test-suite.result }} |" >> pipeline-summary.md
          echo "| 🗿 Build Config | ${{ needs.build-config.result }} |" >> pipeline-summary.md
          echo "| 🐳 Docker Build | ${{ needs.docker-build.result }} |" >> pipeline-summary.md
          echo "| 🛡️ Container Security | ${{ needs.container-security.result }} |" >> pipeline-summary.md
          echo "| 🚀 GitHub Release | ${{ needs.create-github-release.result }} |" >> pipeline-summary.md
          echo "" >> pipeline-summary.md

          # Enhanced status determination
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-suite.result }}" == "success" ]]; then

            if [[ "${{ needs.build-config.outputs.is-release }}" == "true" ]]; then
              if [[ "${{ needs.docker-build.result }}" == "success" && \
                    "${{ needs.create-github-release.result }}" == "success" ]]; then
                echo "## 🎉 RELEASE SUCCESSFUL!" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 🚀 Harbor ${{ needs.build-config.outputs.version }} Released!" >> pipeline-summary.md
                echo "- ✅ All tests passed" >> pipeline-summary.md
                echo "- ✅ Docker images built and published" >> pipeline-summary.md
                echo "- ✅ Security scans completed" >> pipeline-summary.md
                echo "- ✅ GitHub release created" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 📦 Published Images:" >> pipeline-summary.md
                echo "- \`ghcr.io/deusextaco/harbor:${{ needs.build-config.outputs.version }}\`" >> pipeline-summary.md
                echo "- \`dextaco/harbor:${{ needs.build-config.outputs.version }}\`" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "### 🎯 Release Details:" >> pipeline-summary.md
                echo "- **Version**: ${{ needs.build-config.outputs.version }}" >> pipeline-summary.md
                echo "- **Milestone**: ${{ needs.build-config.outputs.milestone }}" >> pipeline-summary.md
                echo "- **Type**: ${{ needs.build-config.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable' }}" >> pipeline-summary.md
                if [[ "${{ needs.create-github-release.outputs.release-url }}" != "" ]]; then
                  echo "- **Release Notes**: ${{ needs.create-github-release.outputs.release-url }}" >> pipeline-summary.md
                fi
              else
                echo "## ⚠️ RELEASE FAILED!" >> pipeline-summary.md
                echo "" >> pipeline-summary.md
                echo "Release creation failed - check the logs above." >> pipeline-summary.md
              fi
            else
              echo "## ✅ BUILD SUCCESSFUL!" >> pipeline-summary.md
              echo "" >> pipeline-summary.md
              echo "### 🎉 All checks passed!" >> pipeline-summary.md
              if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
                echo "- ✅ Docker images built and published" >> pipeline-summary.md
                echo "- ✅ Available for testing and deployment" >> pipeline-summary.md
              fi
            fi
          else
            echo "## ❌ PIPELINE FAILED!" >> pipeline-summary.md
            echo "" >> pipeline-summary.md
            echo "### 🚨 Critical issues found!" >> pipeline-summary.md
            if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
              echo "- ❌ Code quality checks failed" >> pipeline-summary.md
            fi
            if [[ "${{ needs.test-suite.result }}" != "success" ]]; then
              echo "- ❌ Test suite failed" >> pipeline-summary.md
            fi
          fi

          echo "" >> pipeline-summary.md
          echo "## 📋 Next Steps" >> pipeline-summary.md

          if [[ "${{ needs.build-config.outputs.is-release }}" == "true" ]]; then
            if [[ "${{ needs.docker-build.result }}" == "success" && \
                  "${{ needs.create-github-release.result }}" == "success" ]]; then
              echo "- 🎉 Release is complete and ready for use!" >> pipeline-summary.md
              echo "- 📢 Announce the release to the community" >> pipeline-summary.md
              echo "- 📝 Update documentation if needed" >> pipeline-summary.md
            else
              echo "- 🔧 Fix release issues and re-tag if necessary" >> pipeline-summary.md
              echo "- 🔍 Check workflow logs for specific errors" >> pipeline-summary.md
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "- 🔍 Review any failed checks above" >> pipeline-summary.md
            echo "- 🔧 Fix issues and push new commits" >> pipeline-summary.md
            echo "- ✅ Merge when all checks pass" >> pipeline-summary.md
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
              echo "- ✅ New images are available for deployment" >> pipeline-summary.md
              echo "- 🔍 Review security scan results if needed" >> pipeline-summary.md
              echo "- 📦 Update deployment configs with new image tags" >> pipeline-summary.md
            else
              echo "- 🔧 Fix build issues before deployment" >> pipeline-summary.md
            fi
          fi

          echo "" >> pipeline-summary.md
          echo "## 🗂️ Harbor Development Status" >> pipeline-summary.md
          echo "- **Version**: ${{ needs.build-config.outputs.version }}" >> pipeline-summary.md
          echo "- **Milestone**: ${{ needs.build-config.outputs.milestone }} (Foundation Phase)" >> pipeline-summary.md
          echo "- **Current Focus**: Building core infrastructure and CI/CD pipeline" >> pipeline-summary.md
          echo "- **Next Milestone**: M1 (Container Discovery & Registry Integration)" >> pipeline-summary.md

          cat pipeline-summary.md

      - name: Upload pipeline summary
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary-${{ github.run_number }}-${{ github.run_attempt }}
          path: pipeline-summary.md
          retention-days: 30

      - name: Set final pipeline status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-suite.result }}" == "success" ]]; then

            if [[ "${{ needs.build-config.outputs.is-release }}" == "true" ]]; then
              if [[ "${{ needs.docker-build.result }}" == "success" && \
                    "${{ needs.create-github-release.result }}" == "success" ]]; then
                echo "🎉 Harbor ${{ needs.build-config.outputs.version }} released successfully!"
                echo ""
                echo "📦 Docker Images:"
                echo "- ghcr.io/deusextaco/harbor:${{ needs.build-config.outputs.version }}"
                echo "- dextaco/harbor:${{ needs.build-config.outputs.version }}"
                echo ""
                echo "🔗 Release URL: ${{ needs.create-github-release.outputs.release-url }}"
              else
                echo "❌ Release creation failed!"
                exit 1
              fi
            else
              echo "✅ Harbor CI/CD Pipeline completed successfully!"
              if [ "${{ needs.docker-build.result }}" == "success" ]; then
                echo "🐳 New Docker images published"
              fi
            fi
          else
            echo "❌ Harbor CI/CD Pipeline failed!"
            exit 1
          fi
  # =============================================================================
  # Stage 8: PR Comment Update (ADD THIS NEW SECTION)
  # =============================================================================

  pr-pipeline-comment:
    name: Update PR Pipeline Summary
    needs: [ pre-flight-check, code-quality, static-security, dependency-security, test-suite, build-config, docker-build, container-security, create-github-release, pipeline-summary ]  # MODIFY - add pre-flight-check
    if: |
      github.event_name == 'pull_request' &&
      github.event.pull_request.number != null &&
      always()
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      issues: write

    steps:
      - name: Generate PR summary
        run: |
          cat > pr-summary.md << 'EOF'
          <!-- harbor-pr-comment:pipeline-summary -->
          ## 🚀 Harbor CI/CD Pipeline Results

          ### Pipeline Status

          | Stage | Status |
          |-------|--------|
          | 🔍 Code Quality | ${{ needs.code-quality.result }} |
          | 🔒 Static Security | ${{ needs.static-security.result }} |
          | 📦 Dependency Security | ${{ needs.dependency-security.result }} |
          | 🧪 Test Suite | ${{ needs.test-suite.result }} |
          | 🐳 Docker Build | ${{ needs.docker-build.result }} |
          | 🛡️ Container Security | ${{ needs.container-security.result }} |

          ### Summary
          EOF

          # Determine overall status
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-suite.result }}" == "success" ]]; then
            echo "✅ **All critical checks passed!** Ready for review and merge." >> pr-summary.md
          else
            echo "❌ **Some checks failed.** Please review the errors above." >> pr-summary.md
          fi

          echo "" >> pr-summary.md
          echo "### Details" >> pr-summary.md
          echo "- **Branch**: \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`" >> pr-summary.md
          echo "- **Commit**: \`${{ github.event.pull_request.head.sha }}\`" >> pr-summary.md
          echo "- **Version**: ${{ needs.build-config.outputs.version || 'N/A' }}" >> pr-summary.md
          echo "- **Milestone**: ${{ needs.build-config.outputs.milestone || 'M0' }}" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "### Quick Links" >> pr-summary.md
          echo "- [View Full Pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> pr-summary.md
          echo "- [View Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "---" >> pr-summary.md
          echo "_Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> pr-summary.md

      - name: Find existing comment
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- harbor-pr-comment:pipeline-summary -->'

      - name: Update PR comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: pr-summary.md
          edit-mode: replace
