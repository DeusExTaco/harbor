# Harbor Container Updater - ARM64 Optimized Development Dockerfile
# Optimized for faster builds on ARM64 architecture while maintaining full functionality

FROM python:3.13-slim

# ARM64 optimization: Minimize layer count and optimize package installation
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    curl \
    ca-certificates \
    git \
    build-essential \
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create harbor user early
RUN groupadd -r harbor && useradd -r -g harbor harbor

# Set working directory
WORKDIR /app

# ARM64 optimization: Set environment variables to speed up Python operations
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    DEBIAN_FRONTEND=noninteractive

# ARM64 optimization: Copy and install requirements first for better caching
COPY requirements/ ./requirements/
COPY pyproject.toml ./

# ARM64 optimization: Use faster pip install strategy but keep full functionality
RUN pip install --upgrade pip && \
    pip install -e ".[dev]"

# Copy application code
COPY --chown=harbor:harbor . .

# Create directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/config && \
    chown -R harbor:harbor /app

# Switch to harbor user
USER harbor

# Development environment
ENV HARBOR_MODE=development \
    LOG_LEVEL=DEBUG \
    DEV_RELOAD=true \
    ENABLE_AUTO_DISCOVERY=true

# Expose port
EXPOSE 8080

# Health check for ARM64 (kept as requested)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python scripts/health_check.py || exit 1

# Development command with hot reload
CMD ["python", "-m", "uvicorn", "app.main:create_app", "--factory", "--host", "0.0.0.0", "--port", "8080", "--reload"]
