# deploy/docker/Dockerfile.dev
# Harbor Container Updater - Development Dockerfile
# Enhanced Debian Slim with development tools

FROM python:3.13-slim-bullseye AS builder

# Build-time optimizations
ARG PIP_NO_CACHE_DIR=1
ARG PIP_DISABLE_PIP_VERSION_CHECK=1

RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build
COPY requirements/ requirements/

# Build wheels for all dependencies with explicit --no-cache-dir
RUN pip wheel --no-cache-dir --wheel-dir=/wheels \
    -r requirements/base.txt \
    -r requirements/development.txt

# Final stage - Enhanced Debian Slim for development
FROM python:3.13-slim-bullseye

# Create non-root user (keep bash shell for development)
RUN groupadd -r harbor --gid=1000 && \
    useradd -r -g harbor --uid=1000 --home-dir=/app --shell=/bin/bash harbor

# Install wheels
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/* && \
    rm -rf /wheels

# Development tools and security updates
RUN apt-get update && \
    apt-get -y upgrade && \
    apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    tzdata \
    git \
    vim \
    htop \
    procps \
    iputils-ping \
    net-tools \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # Clean up build dependencies - fix SC2015 by using if-then
    if command -v gcc >/dev/null 2>&1; then \
        apt-get purge -y --auto-remove gcc build-essential; \
    fi

WORKDIR /app

# Copy application with correct ownership
COPY --chown=1000:1000 . .

# Create required directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/config /app/.cache && \
    chmod -R u=rwX,go=rX /app && \
    chown -R 1000:1000 /app

# Create entrypoint script using echo commands
# hadolint ignore=SC2016
RUN echo '#!/bin/sh' > /app/docker-entrypoint-dev.sh && \
    echo 'set -e' >> /app/docker-entrypoint-dev.sh && \
    echo '' >> /app/docker-entrypoint-dev.sh && \
    echo '# If first argument is python or starts with -, pass all arguments to python' >> /app/docker-entrypoint-dev.sh && \
    echo 'if [ "$1" = "python" ] || [ "${1#-}" != "$1" ]; then' >> /app/docker-entrypoint-dev.sh && \
    echo '    exec "$@"' >> /app/docker-entrypoint-dev.sh && \
    echo 'fi' >> /app/docker-entrypoint-dev.sh && \
    echo '' >> /app/docker-entrypoint-dev.sh && \
    echo '# If running tests (when -c is passed), execute with python' >> /app/docker-entrypoint-dev.sh && \
    echo 'if [ "$1" = "-c" ]; then' >> /app/docker-entrypoint-dev.sh && \
    echo '    exec python "$@"' >> /app/docker-entrypoint-dev.sh && \
    echo 'fi' >> /app/docker-entrypoint-dev.sh && \
    echo '' >> /app/docker-entrypoint-dev.sh && \
    echo '# If running with custom uvicorn args' >> /app/docker-entrypoint-dev.sh && \
    echo 'if [ "$1" = "uvicorn" ]; then' >> /app/docker-entrypoint-dev.sh && \
    echo '    exec python -m "$@"' >> /app/docker-entrypoint-dev.sh && \
    echo 'fi' >> /app/docker-entrypoint-dev.sh && \
    echo '' >> /app/docker-entrypoint-dev.sh && \
    echo '# Default: run the Harbor application with uvicorn in development mode with reload' >> /app/docker-entrypoint-dev.sh && \
    echo 'exec python -m uvicorn app.main:create_app --factory --host 0.0.0.0 --port 8080 --reload' >> /app/docker-entrypoint-dev.sh && \
    chmod 755 /app/docker-entrypoint-dev.sh && \
    chown 1000:1000 /app/docker-entrypoint-dev.sh

# Switch to non-root user
USER 1000:1000

# Development environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    HARBOR_MODE=development \
    LOG_LEVEL=DEBUG \
    DEV_RELOAD=true \
    ENABLE_AUTO_DISCOVERY=true \
    PATH="/home/harbor/.local/bin:$PATH"

EXPOSE 8080 5678

# Development health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD ["python", "scripts/health_check.py"]

# Use shell script as entrypoint to handle different execution modes
ENTRYPOINT ["/app/docker-entrypoint-dev.sh"]
