[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "harbor"
version = "0.1.0"
description = "Automated Docker container updates for home labs and enterprises"
readme = "README.md"
authors = [{name = "Harbor Contributors", email = "harbor@example.com"}]
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["docker", "containers", "updates", "automation", "homelab"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

# Core runtime dependencies for Harbor v1.0 (M0-M6 milestones)
dependencies = [
    # Web framework and async support
    "fastapi>=0.104.0,<0.120.0",
    "uvicorn[standard]>=0.24.0,<0.30.0",
    "python-multipart>=0.0.6,<0.1.0",     # Form data support

    # Configuration and validation (Pydantic v2)
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",    # BaseSettings moved here in v2

    # Database and ORM
    "sqlalchemy>=2.0.0,<2.1.0",
    "alembic>=1.12.0,<2.0.0",             # Database migrations
    "aiosqlite>=0.19.0,<0.21.0",          # Async SQLite driver

    # Template engine and UI
    "jinja2>=3.1.0,<4.0.0",

    # HTTP client for registry API calls
    "httpx>=0.25.0,<0.28.0",

    # Docker integration
    "docker>=6.1.0,<8.0.0",

    # Job scheduling
    "apscheduler>=3.10.0,<4.0.0",

    # Logging and monitoring
    "structlog>=23.2.0,<24.0.0",
    "prometheus-client>=0.19.0,<1.0.0",

    # Security
    "argon2-cffi>=23.1.0,<24.0.0",        # Password hashing
    "cryptography>=43.0.0,<44.0.0",       # Credential encryption

    # Utilities
    "python-dateutil>=2.8.0,<3.0.0",
    "packaging>=23.0,<25.0",              # Version parsing

    # Optional dependencies with graceful fallbacks
    "psutil>=5.9.0,<6.0.0",               # System monitoring (optional)
    "pyyaml>=6.0,<7.0",                   # YAML config support (optional)
    "tzdata>=2023.3",                     # Timezone data for scheduling
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing framework
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<0.25.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-xdist>=3.5.0,<4.0.0",        # Parallel test execution
    "pytest-html>=4.1.0,<5.0.0",         # HTML test reports

    # End-to-end testing
    "playwright>=1.40.0,<2.0.0",

    # Code quality tools
    "ruff>=0.12.8,<0.15.0",              # Linting and formatting
    "mypy>=1.17.1,<2.0.0",               # Type checking
    "black>=25.1.0,<26.0.0",             # Code formatting
    "pre-commit>=3.6.0,<4.0.0",          # Git hooks

    # Development utilities
    "ipython>=8.17.0,<9.0.0",            # Better REPL
    "rich>=13.7.0,<14.0.0",              # Pretty printing
    "watchfiles>=0.21.0,<1.0.0",         # File watching

    # Documentation tools
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.4.0,<10.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0,<2.0.0",

    # Database tools
    "sqlite-web>=0.5.0,<1.0.0",          # SQLite browser

    # Security testing
    "bandit>=1.7.0,<2.0.0",              # Security scanning
    "safety>=2.3.0,<3.0.0",              # Dependency scanning

    # Performance profiling
    "py-spy>=0.3.0,<1.0.0",
    "memory-profiler>=0.61.0,<1.0.0",

    # Mock and testing utilities
    "responses>=0.24.0,<1.0.0",          # HTTP mocking
    "factory-boy>=3.3.0,<4.0.0",         # Test data factories

    # Type checking support
    "types-python-dateutil>=2.8.0",       # Type stubs for python-dateutil
    "types-requests>=2.31.0",             # Type stubs for requests
    "types-PyYAML>=6.0.12",               # Type stubs for PyYAML
    "pydantic[email]>=2.5.0,<3.0.0",      # Pydantic with email validator support
    "sqlalchemy[mypy]>=2.0.0,<2.1.0",     # SQLAlchemy mypy plugin

    # Development environment
    "python-dotenv>=1.0.0,<2.0.0",       # Load .env files
]

# Production dependencies (enterprise features)
prod = [
    "psycopg2-binary>=2.9.0,<3.0.0",     # PostgreSQL driver
    "redis>=5.0.0,<6.0.0",               # Caching and sessions
    "hiredis>=2.2.0,<3.0.0",             # High-performance Redis
    "gunicorn>=21.2.0,<22.0.0",          # Production WSGI server
    "orjson>=3.9.0,<4.0.0",              # Fast JSON serialization

    # Future enterprise features (ready to enable)
    "pyotp>=2.9.0,<3.0.0",               # TODO: M7+ TOTP for MFA
    "qrcode>=7.4.0,<8.0.0",              # TODO: M7+ QR codes for MFA
    "python-ldap>=3.4.0,<4.0.0",         # TODO: M9+ LDAP auth
    "python-jose>=3.3.0,<4.0.0",         # TODO: M9+ JWT tokens
    "opentelemetry-api>=1.21.0,<2.0.0",  # TODO: M7+ Tracing
    "opentelemetry-sdk>=1.21.0,<2.0.0",  # TODO: M7+ Tracing
    "sentry-sdk>=1.40.0,<2.0.0",         # TODO: M7+ Error tracking
    "celery>=5.3.0,<6.0.0",              # TODO: M8+ Task queue
    "aiosmtplib>=3.0.0,<4.0.0",          # TODO: M7+ Email notifications
    "email-validator>=2.1.0,<3.0.0",     # TODO: M7+ Email validation
]

# Testing dependencies (separate for CI optimization)
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",           # Test client
]

[project.urls]
Homepage = "https://github.com/DeusExTaco/harbor"
Documentation = "https://harbor-docs.dev"
Repository = "https://github.com/DeusExTaco/harbor"
"Bug Tracker" = "https://github.com/DeusExTaco/harbor/issues"

[project.scripts]
harbor = "app.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

# =============================================================================
# Testing Configuration (pytest)
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=0",  # Set to desired minimum coverage later
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "database: Tests requiring database",
    "slow: Slow running tests",
    "needs_database_init: tests requiring full database initialization (deselect with '-m \"not needs_database_init\"')",

]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# =============================================================================
# Code Quality Configuration
# =============================================================================

[tool.ruff]
# Target Python 3.11+ for Harbor
target-version = "py313"
line-length = 88
indent-width = 4

# Enable specific rule sets
lint.select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C4",   # flake8-comprehensions
    "PTH",  # flake8-use-pathlib
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules that conflict with Black or are not needed
lint.ignore = [
    "E501",   # Line too long (handled by Black)
    "B008",   # Do not perform function calls in argument defaults
    "N806",   # Variable in function should be lowercase (SQLAlchemy models)
]

# Exclude specific directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",  # Alembic migration files
]

[tool.ruff.lint.per-file-ignores]
# Test files can use assert statements and have longer lines
"tests/*" = ["B011", "E501"]
# Migration files can have any style
"app/db/migrations/*" = ["E", "W", "F", "UP", "B", "SIM", "I", "N", "C4", "PTH", "RUF"]
# Development scripts can be more relaxed
"*_test.py" = ["E", "W", "F", "UP", "B", "SIM", "I", "N", "C4", "PTH", "RUF"]
"test_*.py" = ["E", "W", "F", "UP", "B", "SIM", "I", "N", "C4", "PTH", "RUF"]
"debug_*.py" = ["E", "W", "F", "UP", "B", "SIM", "I", "N", "C4", "PTH", "RUF"]
"simple_*.py" = ["E", "W", "F", "UP", "B", "SIM", "I", "N", "C4", "PTH", "RUF"]
"validate_*.py" = ["E", "W", "F", "UP", "B", "SIM", "I", "N", "C4", "PTH", "RUF"]

[tool.ruff.lint.isort]
known-first-party = ["app", "tests"]
force-single-line = false
lines-after-imports = 2

# =============================================================================
# Type Checking Configuration (mypy)
# =============================================================================

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow some untyped decorators
no_implicit_optional = true
show_error_codes = true

# SQLAlchemy plugin for better type checking
plugins = ["sqlalchemy.ext.mypy.plugin"]

# Ignore missing imports for external libraries
[[tool.mypy.overrides]]
module = [
    "docker.*",
    "apscheduler.*",
    "structlog.*",
    "prometheus_client.*",
    "pydantic_settings.*",  # Handle pydantic-settings import issues
    "psutil",
    "yaml",
    "argon2.*",
    "cryptography.*",
    "jinja2.*",
    "uvicorn.*",
    "sqlalchemy.*",
    "alembic.*",
    "aiosqlite.*",
    "httpx.*",
]
ignore_missing_imports = true
disallow_untyped_decorators = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Specific overrides for development and test scripts
[[tool.mypy.overrides]]
module = [
    "simple_env_test",
    "test_config",
    "debug_test_config",
    "validate_config",
]
ignore_errors = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# Override for test files in tests directory
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# Allow Any in BaseSettings subclasses (known pydantic limitation)
[[tool.mypy.overrides]]
module = "app.config"
warn_return_any = false
disable_error_code = ["misc"]

# =============================================================================
# Code Formatting Configuration (Black)
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude migration files from formatting
  migrations
)/
'''

# =============================================================================
# Coverage Configuration
# =============================================================================

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
