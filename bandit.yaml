# Harbor Container Updater - Bandit Security Configuration
# Configuration file: bandit.yaml (place in project root)
# Updated for Harbor security middleware implementation

# =============================================================================
# Test Exclusions - Skip specific security tests that are false positives
# =============================================================================
skips:
  # B101: Assert statements are expected in test files and development scripts
  - B101

  # B104: Binding to all interfaces (0.0.0.0) is intentional for Docker containers
  # This is safe in containerized deployments behind firewalls/proxies
  - B104

  # B110: Try/except/pass is acceptable for graceful environment detection
  # Used in Harbor for optional dependency handling (psutil, pyyaml)
  - B110

  # B608: Hardcoded SQL expressions (false positive in config/template generation)
  # Harbor doesn't use raw SQL strings, this triggers on documentation examples
  - B608

# =============================================================================
# File and Directory Exclusions (Following Harbor Project Structure)
# =============================================================================
exclude_dirs:
  # Test directories
  - tests
  - test

  # Development and debugging scripts (Harbor project structure)
  - scripts/dev
  - scripts

  # Build and distribution directories
  - build
  - dist
  - .eggs
  - "*.egg-info"

  # Virtual environments
  - venv
  - .venv
  - env

  # Cache directories
  - __pycache__
  - .pytest_cache
  - .mypy_cache
  - .ruff_cache

  # Version control
  - .git

  # Node modules (if any)
  - node_modules

  # Documentation build
  - site
  - docs/_build

# Exclude specific file patterns
exclude:
  # Test files (comprehensive patterns)
  - "*_test.py"
  - "test_*.py"
  - "tests/**/*"

  # Development and debugging scripts
  - "debug_*.py"
  - "simple_*.py"
  - "validate_*.py"
  - "test_config.py"
  - "test_security_middleware.py"

  # Migration files (SQLAlchemy/Alembic) - future M0 deliverables
  - "migrations/versions/*.py"
  - "alembic/versions/*.py"
  - "app/db/migrations/versions/*.py"

  # Configuration examples and templates
  - "examples/**/*"
  - "templates/**/*"
  - "config/examples/**/*"

# =============================================================================
# Security Test Configuration (Harbor-Relevant Tests Only)
# =============================================================================

# Only run tests that are relevant for Harbor's security model
tests:
  - B102 # exec_used
  - B103 # set_bad_file_permissions
  - B105 # hardcoded_password_string
  - B106 # hardcoded_password_funcarg
  - B107 # hardcoded_password_default
  - B108 # hardcoded_tmp_directory
  - B112 # try_except_continue
  - B201 # flask_debug_true
  - B301 # pickle
  - B302 # marshal
  - B303 # md5
  - B304 # des
  - B305 # cipher
  - B306 # mktemp_q
  - B307 # eval
  - B308 # mark_safe
  - B309 # httpsconnection
  - B310 # urllib_urlopen
  - B311 # random
  - B312 # telnetlib
  - B313 # xml_bad_cElementTree
  - B314 # xml_bad_ElementTree
  - B315 # xml_bad_expatreader
  - B316 # xml_bad_expatbuilder
  - B317 # xml_bad_sax
  - B318 # xml_bad_minidom
  - B319 # xml_bad_pulldom
  - B320 # xml_bad_xmlparser
  - B321 # ftplib
  - B322 # input
  - B323 # unverified_context
  - B324 # hashlib_new_insecure_functions
  - B325 # tempnam
  - B401 # import_telnetlib
  - B402 # import_ftplib
  - B403 # import_pickle
  - B404 # import_subprocess (Harbor uses subprocess safely for Docker API)
  - B405 # import_xml_etree
  - B406 # import_xml_sax
  - B407 # import_xml_expat
  - B408 # import_xml_minidom
  - B409 # import_xml_pulldom
  - B410 # import_lxml
  - B411 # import_xmlrpclib
  - B412 # import_httpoxy
  - B413 # import_pycrypto
  - B501 # request_with_no_cert_validation
  - B502 # ssl_with_bad_version
  - B503 # ssl_with_bad_defaults
  - B504 # ssl_with_no_version
  - B505 # weak_cryptographic_key
  - B506 # yaml_load (Harbor uses safe_load)
  - B507 # ssh_no_host_key_verification
  - B601 # paramiko_calls
  - B602 # subprocess_popen_with_shell_equals_true
  - B603 # subprocess_without_shell_equals_false
  - B604 # any_other_function_with_shell_equals_true
  - B605 # start_process_with_a_shell
  - B606 # start_process_with_no_shell
  - B607 # start_process_with_partial_path
  - B609 # linux_commands_wildcard_injection
  - B610 # django_extra_used
  - B611 # django_rawsql_used
  - B701 # jinja2_autoescape_false (Harbor uses safe templating)
  - B702 # use_of_mako_templates
  - B703 # django_mark_safe

# =============================================================================
# Reporting Configuration
# =============================================================================

# Set confidence and severity levels for production-ready security
confidence: MEDIUM # LOW, MEDIUM, HIGH
severity: MEDIUM # LOW, MEDIUM, HIGH

# Output format (txt for CI/CD readability, json for tooling integration)
format: txt # txt, json, csv, xml

# Additional reporting options
include_nosec: false # Don't include # nosec comments in output (cleaner reports)
report_skipped: false # Don't report skipped tests to reduce noise
verbose: false # Reduce verbosity for CI/CD environments

# =============================================================================
# Harbor-Specific Security Considerations
# =============================================================================

# These exclusions are specific to Harbor's security model and deployment scenarios:

# 1. B104 (bind all interfaces): Intentional for Docker containers
#    - Harbor runs in containers behind firewalls/reverse proxies
#    - Binding to 0.0.0.0 is the standard practice for containerized apps
#    - Security is handled at the network/infrastructure level

# 2. B110 (try/except/pass): Used for graceful optional dependency handling
#    - Harbor gracefully handles missing optional dependencies (psutil, pyyaml)
#    - This pattern is used in environment detection, not error suppression

# 3. B404 (subprocess import): Core functionality for Docker API integration
#    - Harbor needs subprocess for Docker daemon communication
#    - All subprocess usage is validated through input sanitization
#    - No user input is passed directly to subprocess calls

# 4. B608 (hardcoded SQL): False positive on configuration template strings
#    - Harbor uses parameterized queries via SQLAlchemy
#    - This triggers on documentation examples and config templates
#    - No actual SQL injection vulnerabilities present
